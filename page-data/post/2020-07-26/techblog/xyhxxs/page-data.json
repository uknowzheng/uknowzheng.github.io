{"componentChunkName":"component---src-templates-blog-post-js","path":"/post/2020-07-26/techblog/xyhxxs/","result":{"data":{"site":{"siteMetadata":{"title":"～ 全栈小黄人吖 ～","subTitle":"专注于前后端打通的固体移动工程师","description":"tech blog","author":"uknowzheng","social":{"github":"//github.com/uknowzheng"}}},"markdownRemark":{"id":"660ccb46-76bc-59ba-bf2b-c36a44222827","excerpt":"…","html":"<h3>背景<br />为什么突然想写前端编码中的设计模式呢？国庆期间自己思考了下设计模式在日常开发中的用法以及代码重构的技巧。于是乎整理了下这篇文章跟大家分享下前端这块的设计模式以及一些代码重构的思路。设计模式的玄学还是得在很多个项目中去实战总结思考才能领悟到。<br /></h3>\n<p><br />### 设计模式<br />设计模式是大家日常开发中面向对象比较长谈的代码结构的设计方式，主要规范了我们平时开发过程中的代码设计原则，这里列举下比较重要的几个原则：<br />- 开闭原则(OCP)：对于组件功能的扩展是开放的,对于原有代码的修改是封闭的。<br />- 单一职责原则(SRP)：一个类只负责一项职责。<br />- 里氏替换原则(LSP)：子类可以扩展父类的功能，但不能改变父类原有的功能。<br />- 依赖倒置原则(DIP)：面向接口编程，不针对实现编程。<br />- 接口隔离原则(ISP)：每一个接口都应该承担相对独立的角色。<br />- 最少知识原则(LoD)：降低系统耦合，使类与类之间的结构松散。<br />\n<br />正常看了这么多原则，没写过大量业务项目代码的话，真的是比较难理解这些思想，当然作为从Java转到Javascript这块坑的我最大的感受是从约束很严格的语言转到一门非常灵活的语言上。但是设计模式的思想还是通用的，依旧能够借助其思想去解决业务设计上的一些问题。<br />\n<br />#### 常见的设计模式<br />一般常见的设计模式有如下24中类：<br />\n<br />|创建型|结构型|行为型<br />------------ | ------------- | ------------|------------ | ------------- | ------------<br />|单例模式 |  代理模式|迭代器模式 | <br />|抽象工厂模式|组合模式 | 模版方法模式 |<br />|简单工厂模式|适配器模式 | 访问者模式|<br />|工厂方法模式|桥接模式|解释器模式|<br />|构建器模式|装饰器模式| 责任链模式|<br />|原型模式|外观模式| 备案录模式|<br />| |享元模式|中介者模式|<br />| | |状态模式|<br />| | |观察者模式|<br />| | |命令模式|<br />| | |策略模式|<br />下面我会用ES6来编写这几种设计模式：<br />#### 创建型模式<br />##### 单例模式模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048572328-03c3cb5e-0e65-48f9-af1c-90711864af9b.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class Singleton {&lt;br /&gt;    static getInstance() {&lt;br /&gt;        if (!Singleton.instance) {&lt;br /&gt;            Singleton.instance = new Singleton();&lt;br /&gt;        }&lt;br /&gt;        return Singleton.instance;&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;    method(){&lt;br /&gt;        console.log(&quot;hello world!&quot;);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;let obj = Singleton.getInstance();&lt;br /&gt;</code><br />##### 简单工厂模式<br /><code class=\"language-text\">&lt;br /&gt;class Car {&lt;br /&gt;    constructor(options) {&lt;br /&gt;        options = options || &quot;&quot;;&lt;br /&gt;        this.doors = options.doors || 4;&lt;br /&gt;        this.state = options.state || &quot;brand new&quot;;&lt;br /&gt;        this.color = options.color || &quot;silver&quot;;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class CarFactory {&lt;br /&gt;    createCar(options) {&lt;br /&gt;        return new Car(options);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;const carFactory = new CarFactory();&lt;br /&gt;const car = carFactory.createCar({&lt;br /&gt;    objType: &quot;car&quot;,&lt;br /&gt;    color: &quot;yellow&quot;,&lt;br /&gt;    doors: 4&lt;br /&gt;});&lt;br /&gt;</code><br />##### 工厂方法模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048542931-7bf6f2d5-2fa6-4822-acea-0495efb1952a.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class Car {&lt;br /&gt;    constructor(options) {&lt;br /&gt;        this.doors = options.doors || 4;&lt;br /&gt;        this.state = options.state || &quot;brand new&quot;;&lt;br /&gt;        this.color = options.color || &quot;silver&quot;;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class BigCar extends Car {&lt;br /&gt;    constructor(options) {&lt;br /&gt;        super(options);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class SmallCar extends Car {&lt;br /&gt;    constructor(options) {&lt;br /&gt;        super(options);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class ObjectFactory {&lt;br /&gt;    constructor(Class) {&lt;br /&gt;        this.objClass = Class;&lt;br /&gt;    }&lt;br /&gt;    createObj(options) {&lt;br /&gt;        return new this.objClass(options);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class BigCarFactory extends ObjectFactory{&lt;br /&gt;    constructor() {&lt;br /&gt;        super(BigCar);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class SmallCarFactory extends ObjectFactory{&lt;br /&gt;    constructor() {&lt;br /&gt;        super(SmallCar);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;//usage &lt;br /&gt;const bigCarFactory = new BigCarFactory();&lt;br /&gt;const bigCarObj = bigCarFactory.createObj({&lt;br /&gt;    color: &quot;yellow&quot;,&lt;br /&gt;    doors: 6&lt;br /&gt;});&lt;br /&gt;\n&lt;br /&gt;const smallCarFactory = new SmallCarFactory();&lt;br /&gt;const smallCarObj = smallCarFactory.createObj({&lt;br /&gt;    color: &quot;blue&quot;,&lt;br /&gt;    doors: 4&lt;br /&gt;});&lt;br /&gt;</code><br />##### 抽象工厂模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048473433-f364ae3d-9c0b-44b1-acec-792c674eb4d1.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class Car {}&lt;br /&gt;class BigCar extends Car{}&lt;br /&gt;class SmallCar extends Car{}&lt;br /&gt;class Bike {}&lt;br /&gt;class BigBike extends Bike{}&lt;br /&gt;class SmallBike extends Bike{}&lt;br /&gt;\n&lt;br /&gt;class Factory {&lt;br /&gt;    getCar(){&lt;br /&gt;    \tthrow new Error(&#39;子类实现&#39;)&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;     getBike(){&lt;br /&gt;    \tthrow new Error(&#39;子类实现&#39;)&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class BigFactory extends Factory {&lt;br /&gt;    getCar(){&lt;br /&gt;    \treturn new BigCar();&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;    getBike(){&lt;br /&gt;    \treturn new BigBike();&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class SmallFactory extends Factory {&lt;br /&gt;    getCar(){&lt;br /&gt;    \treturn new SmallCar();&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;    getBike(){&lt;br /&gt;    \treturn new SmallBike();&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;//usage &lt;br /&gt;const bigFactory = new BigFactory();&lt;br /&gt;const bigcar = bigFactory.getCar();&lt;br /&gt;const bigbike = bigFactory.getBike();&lt;br /&gt;\n&lt;br /&gt;const smallFactory = new SmallFactory();&lt;br /&gt;const smallcar = smallFactory.getCar();&lt;br /&gt;const smallbike = smallFactory.getBike();&lt;br /&gt;</code><br />##### 构建器模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048501573-370262f9-bca6-4c12-b1c8-f250dec9eada.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class CarBuilder {&lt;br /&gt;  constructor() {&lt;br /&gt;    this.engine = &#39;&#39;;&lt;br /&gt;    this.tyre = &#39;&#39;;&lt;br /&gt;    this.logo = &#39;&#39;;&lt;br /&gt;    Object.keys(this).forEach(key =&gt; {&lt;br /&gt;    \t//把每个属性名第一个字母大写并拼入set,构成setXXX&lt;br /&gt;      const setFuncName =  `set${key.substring(0,1).toUpperCase()}${key.substring(1)}`;&lt;br /&gt;      this[setFuncName] = value =&gt; {&lt;br /&gt;        this[key] = value;&lt;br /&gt;        return this;&lt;br /&gt;      }&lt;br /&gt;    })&lt;br /&gt;  }&lt;br /&gt; &lt;br /&gt;  //调用建造者&lt;br /&gt;  build() {&lt;br /&gt;    //取出所有属性非方法&lt;br /&gt;    const keysNoFunc = Object.keys(this).filter(key =&gt; typeof this[key] !== &#39;function&#39;);&lt;br /&gt;    return keysNoWithers.reduce((returnValue, key) =&gt; {&lt;br /&gt;      return {&lt;br /&gt;        ...returnValue,&lt;br /&gt;        [key]: this[key]&lt;br /&gt;      }&lt;br /&gt;    }, {});&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;const car = new CarBuilder()&lt;br /&gt;  .setEngine(&quot;牛逼哄哄的引擎&quot;)&lt;br /&gt;  .setTyre(4)&lt;br /&gt;  .setLogo(&#39;蓝博基泥&#39;)&lt;br /&gt;  .build();&lt;br /&gt;console.log(car)&lt;br /&gt;</code><br />##### 原型模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540049097505-a07e217d-b467-4667-8460-36a2ceeb9acd.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class Person{&lt;br /&gt;  constructor(name) {&lt;br /&gt;    this.name = name;&lt;br /&gt;  }&lt;br /&gt; &lt;br /&gt;   clone(){&lt;br /&gt;      var that = Object.create(this.prototype);&lt;br /&gt;      var other = this.apply(that, arguments);&lt;br /&gt;      return (typeof other === &#39;object&#39; &amp;&amp; other) ? other : that;&lt;br /&gt;   }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;let tom = new Person(&#39;tom&#39;);&lt;br /&gt;let jerry = tom.clone(&#39;jerry&#39;);&lt;br /&gt;</code><br />\n<br />#### 结构型模式<br />##### 代理模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048633796-15202e70-57e2-4055-9539-c0ba901d3c90.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class Master {&lt;br /&gt;  doSomething(args) {&lt;br /&gt;    console.log(&#39;Master do something...&#39; + args.name);&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class Proxy extends Master {&lt;br /&gt;  constructor() {&lt;br /&gt;    super();&lt;br /&gt;  }&lt;br /&gt;\n&lt;br /&gt;  doSomething(args) {&lt;br /&gt;    //do some other thing&lt;br /&gt;    console.log(&#39;proxy do something&#39;)&lt;br /&gt;    args.name = &#39;hello&#39;;&lt;br /&gt;    //master do something&lt;br /&gt;    super.doSomething(args)&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;const proxy = new Proxy();&lt;br /&gt;proxy.doSomething();&lt;br /&gt;</code><br />##### 组合模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048839546-314def10-f9bd-4851-b311-05929103ccdd.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class Component {&lt;br /&gt;    constructor() {}&lt;br /&gt;    operation (){}&lt;br /&gt;    add (Component){}&lt;br /&gt;    remove (Component){}&lt;br /&gt;    getChild (key){}&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class Leaf extends Component {&lt;br /&gt;    constructor(name) {&lt;br /&gt;        super()&lt;br /&gt;        this.name = name&lt;br /&gt;    }&lt;br /&gt;    operation (){}&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class Composite extends Component {&lt;br /&gt;    constructor(name) {&lt;br /&gt;        super()&lt;br /&gt;        this.name = name&lt;br /&gt;        this.children = []&lt;br /&gt;        facade.log(&#39;Composite created&#39;)&lt;br /&gt;    }&lt;br /&gt;\n&lt;br /&gt;    operation (){&lt;br /&gt;        for(var i in this.children)&lt;br /&gt;            this.children[i].Operation()&lt;br /&gt;    }&lt;br /&gt;\n&lt;br /&gt;    add (Component){&lt;br /&gt;        this.children.push(Component)&lt;br /&gt;    }&lt;br /&gt;\n&lt;br /&gt;    remove (Component){&lt;br /&gt;        for(var i in this.children)&lt;br /&gt;            if(this.children[i] === Component)&lt;br /&gt;                this.children.splice(i, 1)&lt;br /&gt;    }&lt;br /&gt;\n&lt;br /&gt;    getChild (key){&lt;br /&gt;        return this.children[key]&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;\n&lt;br /&gt;const composite1 = new Composite(&#39;C1&#39;)&lt;br /&gt;composite1.Add(new Leaf(&#39;L1&#39;))&lt;br /&gt;composite1.Add(new Leaf(&#39;L2&#39;))&lt;br /&gt;const composite2 = new Composite(&#39;C2&#39;)&lt;br /&gt;composite2.Add(composite1)&lt;br /&gt;composite1.GetChild(1).Operation()&lt;br /&gt;composite2.Operation()&lt;br /&gt;</code><br />##### 适配器模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048928458-6456fd90-22fa-47f3-b45a-79b057c311f8.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class MediaPlayerInterface{&lt;br /&gt;    play(audioType,fileName){&lt;br /&gt;        throw &quot;播放方法,由子类实现&quot;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class VlcPlayer{&lt;br /&gt;    playVlc(fileName){&lt;br /&gt;        console.log(`我是Vlc播放器文件名称是${fileName}`)&lt;br /&gt;    }&lt;br /&gt;    playMp4(fileName){}&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class Mp4Player{&lt;br /&gt;    playMp4(fileName){&lt;br /&gt;        console.log(`我是Mp4播放器文件名称是${fileName}`)&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class MediaPlayer extends MediaPlayerInterface{&lt;br /&gt;    play(audioType,fileName){&lt;br /&gt;        if(audioType==&quot;vlc&quot;)new VlcPlayer().playVlc(fileName);&lt;br /&gt;        if(audioType==&quot;mp4&quot;)new Mp4Player().playMp4(fileName);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class Mp3Player{&lt;br /&gt;    playMp3(fileName){&lt;br /&gt;        console.log(`我是Mp3播放器文件名称是${fileName}`)&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class AudioPlayerAdapter extends MediaPlayerInterface{&lt;br /&gt;    constructor(mediaPlayer) {&lt;br /&gt;        super()&lt;br /&gt;        this.mediaPlayer = mediaPlayer;&lt;br /&gt;    }&lt;br /&gt;    play(audioType,fileName){&lt;br /&gt;      if(audioType===&quot;mp3&quot;){&lt;br /&gt;          new Mp3Player().playMp3(fileName);&lt;br /&gt;      }else{&lt;br /&gt;          this.mediaPlayer.play(audioType,fileName);&lt;br /&gt;      }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;const mediaPlayer = new MediaPlayer()&lt;br /&gt;audioPlayer.play(&quot;mp4&quot;, &quot;alone.mp4&quot;);&lt;br /&gt;audioPlayer.play(&quot;vlc&quot;, &quot;far far away.vlc&quot;);&lt;br /&gt;//某天要新增mp3播放器，那么只需要套一层适配器&lt;br /&gt;var audioPlayer = new AudioPlayerAdapter(mediaPlayer);&lt;br /&gt;audioPlayer.play(&quot;mp3&quot;, &quot;beyond the horizon.mp3&quot;);&lt;br /&gt;\n&lt;br /&gt;</code><br />##### 外观模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048810903-904f8cb4-84cf-427c-9438-107db7cb27ed.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class Facade {&lt;br /&gt;    _getUserName() {&lt;br /&gt;        console.log(&quot;current user:&quot; + this.name);&lt;br /&gt;    }&lt;br /&gt;    _setUserName(name) {&lt;br /&gt;        this.name = name;&lt;br /&gt;    }&lt;br /&gt;    _run() {&lt;br /&gt;        console.log(&quot;running&quot;);&lt;br /&gt;    }&lt;br /&gt;    _jump() {&lt;br /&gt;        console.log(&quot;jumping&quot;);&lt;br /&gt;    }&lt;br /&gt;\n&lt;br /&gt;    facade(args) {&lt;br /&gt;    \tlet {run,name,jump} = args;&lt;br /&gt;        this._setUserName(name);&lt;br /&gt;        this._getUserName();&lt;br /&gt;        if (run) {&lt;br /&gt;            this._run();&lt;br /&gt;        }&lt;br /&gt;        if (jump) {&lt;br /&gt;            this._jump();&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;let facadeObj = new Facade();&lt;br /&gt;facadeObj.facade({ run: true, jump: true ,name:&#39;uk&#39; });&lt;br /&gt;</code><br />##### 装饰器模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048819742-4877b75a-26b5-4a3c-ac35-aa612c1e1135.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class MacBook {&lt;br /&gt;    cost() {&lt;br /&gt;        return 997;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;function Memory(macbook) {&lt;br /&gt;    let v = macbook.cost();&lt;br /&gt;    macbook.cost = function() {&lt;br /&gt;        return v + 75;&lt;br /&gt;    };&lt;br /&gt;    return macbook;&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;function Engraving(macbook) {&lt;br /&gt;    let v = macbook.cost();&lt;br /&gt;    macbook.cost = function() {&lt;br /&gt;        return v + 200;&lt;br /&gt;    };&lt;br /&gt;    return macbook;&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;function Insurance(macbook) {&lt;br /&gt;    let v = macbook.cost();&lt;br /&gt;    macbook.cost = function() {&lt;br /&gt;        return v + 250;&lt;br /&gt;    };&lt;br /&gt;    return macbook;&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;let mb = new MacBook();&lt;br /&gt;mb = Memory(mb);//加内存&lt;br /&gt;mb = Engraving(mb);//加刻字&lt;br /&gt;mb = Insurance(mb);//加保险&lt;br /&gt;console.log(mb.cost());// 总计: 1522&lt;br /&gt;</code><br />##### 桥接模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048856475-d005e6f6-df6a-4f8a-a86e-3f91d17cd68b.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class DrawAPI {&lt;br /&gt;   drawCircle(radius,x, y){&lt;br /&gt;    throw &quot;抽象方法&quot;&lt;br /&gt;   }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class RedCircle extends DrawAPI {&lt;br /&gt;    drawCircle( radius,  x,  y) {&lt;br /&gt;     console.log(&quot;Drawing Circle[ color: red, radius: &quot; + radius + &quot;, x: &quot; + x + &quot;, &quot; + y + &quot;]&quot;);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;class GreenCircle extends DrawAPI {&lt;br /&gt;    drawCircle( radius,  x,  y) {&lt;br /&gt;      console.log(&quot;Drawing Circle[ color: green, radius: &quot; + radius + &quot;, x: &quot; + x + &quot;, &quot; + y + &quot;]&quot;);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt; &lt;br /&gt;class Shape {&lt;br /&gt;    constructor(drawAPI) {&lt;br /&gt;        this.drawAPI = drawAPI;&lt;br /&gt;    }&lt;br /&gt;    draw(){&lt;br /&gt;         this.drawAPI.drawCircle(this.x,this.y,this.radius)&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class Circle extends Shape{&lt;br /&gt;    constructor(x, y, radius, drawAPI){&lt;br /&gt;        super(drawAPI);&lt;br /&gt;        this.x = x;&lt;br /&gt;        this.y = y;&lt;br /&gt;        this.radius = radius;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;//将实际Circle渲染的实现与Circle定义进行分离&lt;br /&gt;const redCircle = new Circle(100,1000, 10, new RedCircle());//画红圆&lt;br /&gt;const greenCircle = new Circle(100,100, 10, new GreenCircle());//画绿圆&lt;br /&gt;redCircle.draw();&lt;br /&gt;greenCircle.draw();&lt;br /&gt;</code><br />##### 享元模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540049044757-3e63a749-5349-4a81-8e52-dd3b94c1cc0e.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class Flyweight {&lt;br /&gt;    constructor(make, model, processor){&lt;br /&gt;      this.make = make;&lt;br /&gt;      this.model = model;&lt;br /&gt;      this.processor = processor;&lt;br /&gt;    }&lt;br /&gt;};&lt;br /&gt;class FlyWeightFactory {&lt;br /&gt;    constructor(){&lt;br /&gt;      flyweights = {};&lt;br /&gt;    }&lt;br /&gt;    get(make, model, processor) {&lt;br /&gt;      if (!flyweights[make + model]) {&lt;br /&gt;          flyweights[make + model] = new Flyweight(make, model, processor);&lt;br /&gt;      }&lt;br /&gt;      return flyweights[make + model];&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;    getCount() {&lt;br /&gt;      let count = 0;&lt;br /&gt;      for (let f in flyweights) count++;&lt;br /&gt;      return count;&lt;br /&gt;    }&lt;br /&gt;};&lt;br /&gt; class Computer {&lt;br /&gt;   constructor (make, model, processor, memory, tag){&lt;br /&gt;      this.flyweight = FlyWeightFactory.get(make, model, processor);&lt;br /&gt;      this.memory = memory;&lt;br /&gt;      this.tag = tag;&lt;br /&gt;   }&lt;br /&gt;}&lt;br /&gt;class ComputerCollection {&lt;br /&gt;   constructor(){&lt;br /&gt;      var computers = {};&lt;br /&gt;      var count = 0;&lt;br /&gt;   }&lt;br /&gt;   add(make, model, processor, memory, tag){&lt;br /&gt;      computers[tag] = new Computer(make, model, processor, memory, tag);&lt;br /&gt;      count++;&lt;br /&gt;   }&lt;br /&gt;    get(tag){&lt;br /&gt;      return computers[tag];&lt;br /&gt;    }&lt;br /&gt;    getCount() {&lt;br /&gt;      return count;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;var computers = new ComputerCollection();&lt;br /&gt;computers.add(&quot;Dell&quot;, &quot;Studio XPS&quot;, &quot;Intel&quot;, &quot;5G&quot;, &quot;Y755P&quot;);&lt;br /&gt;computers.add(&quot;Dell&quot;, &quot;Studio XPS&quot;, &quot;Intel&quot;, &quot;6G&quot;, &quot;X997T&quot;);&lt;br /&gt;computers.add(&quot;Dell&quot;, &quot;Studio XPS&quot;, &quot;Intel&quot;, &quot;2G&quot;, &quot;U8U80&quot;);&lt;br /&gt;computers.add(&quot;Dell&quot;, &quot;Studio XPS&quot;, &quot;Intel&quot;, &quot;2G&quot;, &quot;NT777&quot;);&lt;br /&gt;computers.add(&quot;Dell&quot;, &quot;Studio XPS&quot;, &quot;Intel&quot;, &quot;2G&quot;, &quot;0J88A&quot;);&lt;br /&gt;computers.add(&quot;HP&quot;, &quot;Envy&quot;, &quot;Intel&quot;, &quot;4G&quot;, &quot;CNU883701&quot;);&lt;br /&gt;computers.add(&quot;HP&quot;, &quot;Envy&quot;, &quot;Intel&quot;, &quot;2G&quot;, &quot;TXU003283&quot;);&lt;br /&gt;console.log(&quot;Computers: &quot; + computers.getCount());&lt;br /&gt;//count = 7;&lt;br /&gt;console.log(&quot;Flyweights: &quot; + FlyWeightFactory.getCount());&lt;br /&gt;//count = 2; 这里把品牌/型号/处理器都抽成共享单元了&lt;br /&gt;//[(&quot;Dell&quot;, &quot;Studio XPS&quot;, &quot;Intel&quot;),(&quot;HP&quot;, &quot;Envy&quot;, &quot;Intel&quot;)]&lt;br /&gt;</code><br />\n<br />#### 行为型模式<br />##### 策略模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048612724-086d8064-c162-43e1-8781-53a705c52969.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class Checker {&lt;br /&gt;  constructor(check, instructions) {&lt;br /&gt;     this.check = check;&lt;br /&gt;     this.instructions = instructions;&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class Validator {&lt;br /&gt;  constructor(config) {&lt;br /&gt;    this.config = config,&lt;br /&gt;    this.messages = {};&lt;br /&gt;  }&lt;br /&gt;\n&lt;br /&gt;  validate(data) {&lt;br /&gt;    for (let key in data) {&lt;br /&gt;      let value = data[key];&lt;br /&gt;      let type = this.config[key];&lt;br /&gt;      if (!type) {&lt;br /&gt;      \tcontinue;&lt;br /&gt;      }&lt;br /&gt;      let checker = Validator[type];&lt;br /&gt;      if (!checker) {&lt;br /&gt;      \tthrow new Error(`No handler to validate type ${type}`);&lt;br /&gt;      }&lt;br /&gt;      let result = checker.check(value);&lt;br /&gt;      if (!result) {&lt;br /&gt;      \tthis.messages.push(checker.instructions + ` **${value}**`);&lt;br /&gt;      }&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;\n&lt;br /&gt;  hasError() {&lt;br /&gt;    return this.messages.length !== 0;&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;let data = {&lt;br /&gt;   first_name:&#39;Super&#39;,&lt;br /&gt;   last_name:&#39;Man&#39;,&lt;br /&gt;   age:&#39;unknown&#39;,&lt;br /&gt;   username:&#39;uk&#39;&lt;br /&gt;};&lt;br /&gt;let config = {&lt;br /&gt;  first_name:&#39;isNonEmpty&#39;,&lt;br /&gt;  age:&#39;isNumber&#39;,&lt;br /&gt;  username:&#39;isAlphaNum&#39;&lt;br /&gt;};&lt;br /&gt;\n&lt;br /&gt;Validator.isNumber = new Checker((val) =&gt; !isNaN(val), &#39;the value can only be a valid number&#39;);&lt;br /&gt;Validator.isNonEmpty = new Checker((val) =&gt; val !== &quot;&quot;, &#39;the value can not be empty&#39;);&lt;br /&gt;Validator.isAlphaNum = new Checker((val) =&gt; !/^a-z0-9/i.test(val), &#39;the value can not have special symbols&#39;);&lt;br /&gt;\n&lt;br /&gt;let validator = new Validator(config);&lt;br /&gt;validator.validate(data);&lt;br /&gt;console.log(validator.hasError());// true&lt;br /&gt;console.log(validator.messages.join(&#39;\\n&#39;)); // the value can only be a valid number **unknown**&lt;br /&gt;</code><br />\n<br />##### 迭代器模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048677832-ba96921d-fdc6-4980-9b1b-d7a42e802cc9.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;\n&lt;br /&gt;class IteratorArray {&lt;br /&gt;  constructor(array) {&lt;br /&gt;    super();&lt;br /&gt;    this.data = array;&lt;br /&gt;  }&lt;br /&gt; &lt;br /&gt;  [Symbol.iterator](){&lt;br /&gt;    let index = 0;&lt;br /&gt;    return {&lt;br /&gt;      next: () =&gt; {&lt;br /&gt;        if (index &lt; this.data.length) {&lt;br /&gt;            return {&lt;br /&gt;            \tvalue: this.data[index++],&lt;br /&gt;                done: false&lt;br /&gt;            };&lt;br /&gt;        }&lt;br /&gt;        return {&lt;br /&gt;             value: undefined,&lt;br /&gt;             done: true&lt;br /&gt;        };&lt;br /&gt;      },&lt;br /&gt;      hasNext: () =&gt; index &lt; this.data.length,&lt;br /&gt;      rewind: () =&gt; index = 0,&lt;br /&gt;      current: () =&gt; {&lt;br /&gt;        index -= 1;&lt;br /&gt;        if (index &lt; this.data.length) {&lt;br /&gt;            return {&lt;br /&gt;            \tvalue: this.data[index++],&lt;br /&gt;                done: false&lt;br /&gt;            };&lt;br /&gt;        }&lt;br /&gt;        return {&lt;br /&gt;        \tvalue: undefined,&lt;br /&gt;            \tdone: true};&lt;br /&gt;      \t}&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;const iteratorArray = new IteratorArray([1,2,3,4,5])&lt;br /&gt;const iter = iteratorArray[Symbol.iterator]();&lt;br /&gt;console.log(iter.next()); // { value: 1, done: false }&lt;br /&gt;console.log(iter.next()); // { value: 2, done: false }&lt;br /&gt;console.log(iter.current());// { value: 2, done: false }&lt;br /&gt;console.log(iter.hasNext());// true&lt;br /&gt;console.log(iter.rewind()); // rewind!&lt;br /&gt;console.log(iter.next()); // { value: 1, done: false }&lt;br /&gt;\n&lt;br /&gt;// for...of&lt;br /&gt;for (let value of iteratorArray) {&lt;br /&gt;  console.log(value);&lt;br /&gt;}&lt;br /&gt;</code><br />##### 观察者模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048699317-529aa40a-07f2-4e7b-8bd4-99f1b847e038.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class Pubsub {&lt;br /&gt;    constructor(){&lt;br /&gt;        this.topics = {};&lt;br /&gt;    }&lt;br /&gt;    publish(name, args) {&lt;br /&gt;        if (!this.topics[name]) {&lt;br /&gt;            return false;&lt;br /&gt;        }&lt;br /&gt;  for(let key in this.topics[name]){&lt;br /&gt;        \tconst callback = this.topics[name];&lt;br /&gt;            callback(args);&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;\n&lt;br /&gt;    subscribe(name, callback) {&lt;br /&gt;        if (!this.topics[name]) {&lt;br /&gt;            this.topics[name] = [];&lt;br /&gt;        }&lt;br /&gt;        this.topics[name].push(callback);&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;    unsubscribe(name,callback) {&lt;br /&gt;         if (!this.topics[name]) {&lt;br /&gt;            return false;&lt;br /&gt;         }&lt;br /&gt;         this.topics[name].remove(callback);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;\n&lt;br /&gt;let obj = {&lt;br /&gt;   callback:(message)=&gt;{&lt;br /&gt;    \tconsole.log(message);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;let pubsub = new Pubsub();&lt;br /&gt;pubsub.subscribe(&quot;subscribe&quot;, obj.callback);&lt;br /&gt;pubsub.publish(&quot;subscribe&quot;, &quot;hello all!&quot;);&lt;br /&gt;//obj console hello all!&lt;br /&gt;</code><br />##### 命令模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540049061395-6d28c48b-becf-4cf7-852a-3d96973c9252.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class Command {&lt;br /&gt;  constructor(do,undo){&lt;br /&gt;        this.do = do;&lt;br /&gt;        this.undo = undo;&lt;br /&gt;    }&lt;br /&gt;    execute(){&lt;br /&gt;        this.do();&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;    undo(){&lt;br /&gt;      this.undo();&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class Commands {&lt;br /&gt;    constructor(){&lt;br /&gt;        this.commandsList = [];&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;    add( command ){&lt;br /&gt;\tthis.commandsList.push( command );&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;    execute(){&lt;br /&gt;      for (const command of this.commandsList){&lt;br /&gt;        command.execute();&lt;br /&gt;      }&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;    undo(){&lt;br /&gt;      for (const command of this.commandsList){&lt;br /&gt;        command.undo();&lt;br /&gt;      }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt; let sleepCommond = new Command(()=&gt;{&lt;br /&gt;  console.log(&#39;sleep&#39;)&lt;br /&gt; },()=&gt;{&lt;br /&gt;  console.log(&#39;wake up&#39;);&lt;br /&gt; });&lt;br /&gt;  let runCommond = new Command(()=&gt;{&lt;br /&gt;  console.log(&#39;run&#39;)&lt;br /&gt; },()=&gt;{&lt;br /&gt;  console.log(&#39;back&#39;);&lt;br /&gt; });&lt;br /&gt;\n&lt;br /&gt;const commands = Commands();&lt;br /&gt;commands.add( sleepCommond );&lt;br /&gt;commands.add( runCommond );&lt;br /&gt;commands.execute();&lt;br /&gt;commands.undo();&lt;br /&gt;</code><br />\n<br />##### 模版方法模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048744748-6832399d-7cb4-4743-9160-0f6e71875094.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class Beverage {&lt;br /&gt;\tboilWater(){&lt;br /&gt;    console.log( &quot;煮一壶水&quot; );&lt;br /&gt;\t}&lt;br /&gt;\tbrew(){&lt;br /&gt;   throw new Error(&#39;具体由子类实现&#39;);&lt;br /&gt;\t}&lt;br /&gt;\tpourInCup(){&lt;br /&gt;   throw new Error(&#39;具体由子类实现&#39;);&lt;br /&gt;\t}&lt;br /&gt;\taddCondiments(){&lt;br /&gt;   throw new Error(&#39;具体由子类实现&#39;);&lt;br /&gt;\t}&lt;br /&gt;    go(){&lt;br /&gt;    \tboilWater();&lt;br /&gt;        brew();&lt;br /&gt;        pourInCup();&lt;br /&gt;        addCondiments();&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class Coffee extends Beverage{&lt;br /&gt;\tbrew() {&lt;br /&gt;   console.log( &quot;用沸水冲泡咖啡&quot; );&lt;br /&gt;\t}&lt;br /&gt;\tpourInCup(){&lt;br /&gt;    console.log( &quot;把咖啡倒进杯子&quot; );&lt;br /&gt;\t}&lt;br /&gt;\taddCondiments() {&lt;br /&gt;   console.log( &quot;加糖和牛奶&quot; );&lt;br /&gt;\t}&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class Tea extends Beverage{&lt;br /&gt;\tbrew() {&lt;br /&gt;   console.log( &quot;用沸水浸泡茶叶&quot; );&lt;br /&gt;\t}&lt;br /&gt;\tpourInCup(){&lt;br /&gt;    console.log( &quot;把茶倒进杯子&quot; );&lt;br /&gt;\t}&lt;br /&gt;\taddCondiments() {&lt;br /&gt;   console.log( &quot;加柠檬&quot; );&lt;br /&gt;\t}&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;const coffee = new Coffee();&lt;br /&gt;const tea = new Tea();&lt;br /&gt;coffee.go();&lt;br /&gt;tea.go();&lt;br /&gt;</code><br />\n<br />##### 责任链模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540049020766-6cad3dc4-cfd5-4846-b695-1a1c90582b5b.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;\n&lt;br /&gt;let order500 = function( orderType, pay, stock ){&lt;br /&gt;  if ( orderType === 1 &amp;&amp; pay === true ){&lt;br /&gt;    console.log( &#39;500 元定金预购，得到100 优惠券&#39; );&lt;br /&gt;  }else{&lt;br /&gt;    return &#39;next&#39;; // 我不知道下一个节点是谁，反正把请求往后面传递&lt;br /&gt;  }&lt;br /&gt;};&lt;br /&gt;\n&lt;br /&gt;let order200 = function( orderType, pay, stock ){&lt;br /&gt;  if ( orderType === 2 &amp;&amp; pay === true ){&lt;br /&gt;    console.log( &#39;200 元定金预购，得到50 优惠券&#39; );&lt;br /&gt;  } else {&lt;br /&gt;    return &#39;next&#39;; // 我不知道下一个节点是谁，反正把请求往后面传递&lt;br /&gt;  }&lt;br /&gt;};&lt;br /&gt;\n&lt;br /&gt;let orderNormal = function( orderType, pay, stock ){&lt;br /&gt;  if ( stock &gt; 0 ){&lt;br /&gt;    console.log( &#39;普通购买，无优惠券&#39; );&lt;br /&gt;  }else{&lt;br /&gt;    console.log( &#39;手机库存不足&#39; );&lt;br /&gt;  }&lt;br /&gt;};&lt;br /&gt;\n&lt;br /&gt;class Chain {&lt;br /&gt;\tconstructor(){&lt;br /&gt;     this.fn = fn;&lt;br /&gt;   this.nextFunc = null;&lt;br /&gt;\t}&lt;br /&gt;\tsetNextFunc( nextFunc ){&lt;br /&gt;   return this.nextFunc = nextFunc;&lt;br /&gt;\t}&lt;br /&gt;\trun() {&lt;br /&gt;  var result = this.fn.apply( this, arguments );&lt;br /&gt;  if ( result === &#39;next&#39; ){&lt;br /&gt;  \treturn this.nextFunc &amp;&amp; this.nextFunc.run.apply( this.nextFunc, arguments);&lt;br /&gt;  }&lt;br /&gt;  return result;&lt;br /&gt;\t}&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;var chainOrder500 = new Chain( order500 );&lt;br /&gt;var chainOrder200 = new Chain( order200 );&lt;br /&gt;var chainOrderNormal = new Chain( orderNormal );&lt;br /&gt;//构造处理链路&lt;br /&gt;chainOrder500.setNextFunc( chainOrder200 );&lt;br /&gt;chainOrder200.setNextFunc( chainOrderNormal );&lt;br /&gt;\n&lt;br /&gt;chainOrder500.run( 1, true, 500 ); // 输出：500 元定金预购，得到100 优惠券&lt;br /&gt;chainOrder500.run( 2, true, 500 ); // 输出：200 元定金预购，得到50 优惠券&lt;br /&gt;chainOrder500.run( 3, true, 500 ); // 输出：普通购买，无优惠券&lt;br /&gt;chainOrder500.run( 1, false, 0 ); // 输出：手机库存不足&lt;br /&gt;</code><br />##### 中介者模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048791779-f31ba263-9035-4cea-ae5a-d4a39d5271da.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt; class ChatRoom {&lt;br /&gt;     constructor () {}&lt;br /&gt;   &lt;br /&gt;     showMessage (message) {&lt;br /&gt;         console.log(new Date(), user.getName(), message)&lt;br /&gt;     }&lt;br /&gt; }&lt;br /&gt; class User {&lt;br /&gt;     constructor (name){&lt;br /&gt;         this.name = name&lt;br /&gt;     }&lt;br /&gt;     setName () {&lt;br /&gt;         this.name = name&lt;br /&gt;     }&lt;br /&gt;     getName() {&lt;br /&gt;        return this.name&lt;br /&gt;     }&lt;br /&gt;     setRoom(room){&lt;br /&gt;      this.room = room; &lt;br /&gt;     }&lt;br /&gt;     sendMessage (message) {&lt;br /&gt;        room.showMessage(this, message)&lt;br /&gt;     }&lt;br /&gt; }&lt;br /&gt; //chatRoom将tom跟jack解耦&lt;br /&gt;const chatRoom = ChatRoom();&lt;br /&gt;\n&lt;br /&gt;const tom = new User(&quot;Tom Zhang&quot;);&lt;br /&gt;tom.setRoom(chatRoom);&lt;br /&gt;tom.sendMessage(&quot;My name is Tom&quot;);&lt;br /&gt;   &lt;br /&gt;const jack = new User(&quot;Jack Chen&quot;);&lt;br /&gt;jack.setRoom(chatRoom);&lt;br /&gt;jack.sendMessage(&quot;My name is Jack&quot;);&lt;br /&gt;\n&lt;br /&gt;</code><br />##### 状态模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048724295-88af7493-26de-4762-b4bf-ace6455d5059.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class Context {&lt;br /&gt;    constructor () {&lt;br /&gt;        this.state = null&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;    setState(state) {&lt;br /&gt;        this.state = state&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;    getState() {&lt;br /&gt;        return this.state&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class State {&lt;br /&gt;    doAction(context) {&lt;br /&gt;         throw new Error(&#39;具体子类去实现状态&#39;)&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class StartState extends State {&lt;br /&gt;    constructor () {&lt;br /&gt;        super()&lt;br /&gt;        this.context = null&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;    doAction(context) {&lt;br /&gt;        console.log(&#39;this is start state&#39;);&lt;br /&gt;        context.setState(this)&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;    printState() {&lt;br /&gt;         console.log(&#39;start state&#39;)&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class StopState extends State {&lt;br /&gt;    constructor() {&lt;br /&gt;        super()&lt;br /&gt;        this.context = null&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;    doAction(context) {&lt;br /&gt;        console.log(&#39;this is stop state&#39;);&lt;br /&gt;        context.setState(this)&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;    printState() {&lt;br /&gt;         console.log(&#39;stop state&#39;)&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class LoadingState extends State {&lt;br /&gt;    constructor() {&lt;br /&gt;        super()&lt;br /&gt;        this.context = null&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;    doAction(context) {&lt;br /&gt;        console.log(&#39;this is loading state&#39;);&lt;br /&gt;        context.setState(this)&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;    printState() {&lt;br /&gt;         console.log(&#39;loading state&#39;)&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;const context = new Context()&lt;br /&gt;let startState = new StartState()&lt;br /&gt;startState.doAction(context)&lt;br /&gt;context.getState().toStateStr()&lt;br /&gt;   &lt;br /&gt;let stopState = new StopState()&lt;br /&gt;stopState.doAction(context)&lt;br /&gt;context.getState().toStateStr()&lt;br /&gt;   &lt;br /&gt;let loadingState = new LoadingState()&lt;br /&gt;loadingState.doAction(context)&lt;br /&gt;context.getState().toStateStr()&lt;br /&gt;</code><br />\n<br />##### 访问者模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048760442-628281c3-baab-450d-ac03-b6c650589fe7.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class Visitor {&lt;br /&gt;   visit(target) {&lt;br /&gt;     console.log(`正在查${target.name}的水表`);&lt;br /&gt;   }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;class User{&lt;br /&gt;    constructor(name) {&lt;br /&gt;        this.name = name || &quot;&quot;;&lt;br /&gt;    }&lt;br /&gt;    accept(visitor) {&lt;br /&gt;    \tvisitor.visit(this);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;let user = new User(&#39;yaoxian&#39;);&lt;br /&gt;var visitor = new Visitor();&lt;br /&gt;user.accept( visitor );//正在查yaoxian的水表&lt;br /&gt;</code><br />##### 解释器模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048663064-d828aec7-e0e0-42ab-8a90-3b7864085b6c.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class Context{&lt;br /&gt;   constructor(input) {&lt;br /&gt;      this.input = input;&lt;br /&gt;      this.output = 0;&lt;br /&gt;   }&lt;br /&gt;   &lt;br /&gt;    startsWith(str) {&lt;br /&gt;        return this.input.substr(0, str.length) === str;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;class Expression{&lt;br /&gt;    constructor(name, one, four, five, nine, multiplier) {&lt;br /&gt;        this.name = name;&lt;br /&gt;        this.one = one;&lt;br /&gt;        this.four = four;&lt;br /&gt;        this.five = five;&lt;br /&gt;        this.nine = nine;&lt;br /&gt;        this.multiplier = multiplier;&lt;br /&gt;    }&lt;br /&gt;   &lt;br /&gt;    interpret(context) {&lt;br /&gt;        if (context.input.length == 0) {&lt;br /&gt;            return;&lt;br /&gt;        }&lt;br /&gt;        else if (context.startsWith(this.nine)) {&lt;br /&gt;            context.output += (9 * this.multiplier);&lt;br /&gt;            context.input = context.input.substr(2);&lt;br /&gt;        }&lt;br /&gt;        else if (context.startsWith(this.four)) {&lt;br /&gt;            context.output += (4 * this.multiplier);&lt;br /&gt;            context.input = context.input.substr(2);&lt;br /&gt;        }&lt;br /&gt;        else if (context.startsWith(this.five)) {&lt;br /&gt;            context.output += (5 * this.multiplier);&lt;br /&gt;            context.input = context.input.substr(1);&lt;br /&gt;        }&lt;br /&gt;        while (context.startsWith(this.one)) {&lt;br /&gt;            context.output += (1 * this.multiplier);&lt;br /&gt;            context.input = context.input.substr(1);&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;\n&lt;br /&gt;const roman = &quot;MCMXXVIII&quot;&lt;br /&gt;const context = new Context(roman);&lt;br /&gt;const tree = [];&lt;br /&gt;tree.push(new Expression(&quot;thousand&quot;, &quot;M&quot;, &quot; &quot; , &quot; &quot;, &quot; &quot; , 1000));&lt;br /&gt;tree.push(new Expression(&quot;hundred&quot;, &quot;C&quot;, &quot;CD&quot;, &quot;D&quot;, &quot;CM&quot;, 100));&lt;br /&gt;tree.push(new Expression(&quot;ten&quot;, &quot;X&quot;, &quot;XL&quot;, &quot;L&quot;, &quot;XC&quot;, 10));&lt;br /&gt;tree.push(new Expression(&quot;one&quot;, &quot;I&quot;, &quot;IV&quot;, &quot;V&quot;, &quot;IX&quot;, 1));&lt;br /&gt;for (var i = 0, len = tree.length; i &lt; len; i++) {&lt;br /&gt;  tree[i].interpret(context);&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;alert(roman + &quot; = &quot; + context.output);&lt;br /&gt;</code><br />\n<br />##### 备案录模式<br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048957948-75b2e902-8f79-45ec-9e96-eef2058839dd.png\" alt=\"image.png\"><br />\n<br /><code class=\"language-text\">&lt;br /&gt;class CacheUtil {&lt;br /&gt;   constructor() {&lt;br /&gt;      this.cache = {};&lt;br /&gt;   }&lt;br /&gt;     &lt;br /&gt;   requestData(url,callback){&lt;br /&gt;       if (cache[url]){&lt;br /&gt;          data = cache[url];&lt;br /&gt;          callback(data);&lt;br /&gt;      }else{&lt;br /&gt;          //模拟网络请求&lt;br /&gt;          setTimeout(()=&gt;{&lt;br /&gt;                cache[url] = data;&lt;br /&gt;                callback(data);&lt;br /&gt;          },3000);   &lt;br /&gt;      }&lt;br /&gt;   }&lt;br /&gt;}&lt;br /&gt;\n&lt;br /&gt;let cache = new CacheUtil();&lt;br /&gt;cache.requestData(&#39;www.baidu.com&#39;,(data)=&gt;{console.log(data)});//请求&lt;br /&gt;cache.requestData(&#39;www.baidu.com&#39;,(data)=&gt;{console.log(data)});//从备忘录中获取&lt;br /&gt;</code><br />关于更多详细的设计模式说明可以到<a href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/#factorypatternjavascript\">《javascript pattern》</a>去查阅。<br />#### 思考总结<br />针对上述的一些设计模式，对其解决问题场景提炼出思考总结。<br />\n<br />|具体设计模式|解决的问题<br />|----|----|<br />|单例模式|保证唯一性|<br />|策略模式|多种策略方案实现结果|<br />|代理模式|对目标对象做前置处理（一般只有一层代理包装），并执行|<br />|迭代器模式|迭代执行与处理分离|<br />|观察者模式（发布订阅模式）|解耦发布者与订阅者之间的关系|<br />|命令模式|记录回溯哦操作，包装操作行为|<br />|组合模式|合理组织树形结构|<br />|模版方法模式|定义操作的流程，实现交由各个子类去实现|<br />|享元模式|明确内外变化，把静态部分单独抽成对象，共享于依赖的多个对象|<br />|责任链模式|根据各自的职责，链式处理|<br />|中介者模式|解耦多个对象之间的关系，由中间人处理|<br />|适配器模式|保持接口原则不变，对新进来的接口进行适配包装掉用|<br />|状态模式|状态流转，维护状态机|<br />|工厂模式|管理对象创建|<br />|外观模式|收口对外暴露的接口|<br />|装饰器模式|类似代理，但是可以多重包装目标对象，并不执行具体逻辑，仅仅包装|<br />|备案录模式|缓存数据，历史可回溯|<br />|访问者模式|允许外部权限访问内部数据|<br />\n<br />#### 设计模式中相似模式的一些思考<br />##### 中介者模式和观察者模式<br />中介者解决的问题是将多个角色进行解耦，过程中会把所有角色交互都收敛到中介角色中，使得各个角色只需要跟中介者通讯。而对于观察者模式，日常中用的比较多的就是发布订阅模式，主要是将订阅者将事件注册到发布者上，一旦发布者发布信息就可以通知到所有的订阅者上，并没有存在中间人去解耦发布者跟订阅者之间的关系。<br />##### 代理模式和装饰器模式<br />代理模式跟装饰器模式都是对目标对象进行包装，但是有比较本质的区别。代理模式一般调用引起目标角色的调用，而装饰器模式仅仅是对目标角色进行包装返回而不会直接触发目标调用。另外代理往往是对目标角色包装一层，而对于装饰器可以不断的嵌套目标角色返回包装后的目标角色。<br />##### 状态模式和策略模式<br />状态模式和策略模式都封装了一系列算法或者行为，类图看上去很相似，但是意图不同。策略模式的各种策略是相互独立平等的，没有内部联系。而对于状态模式往往维护一个状态机，各个状态之间存在依赖关系。<br />\n<br />### 重构技巧<br />另外过程中也总结了日常写代码中，要注意的一些点以及如何重构自己写得不太好的代码。<br />#### 提炼函数<br />如果在函数中有一段代码可以被独立出来，那我们最好把这些代码放进另外一个独立的函数<br />中。这样做的好处：避免出现超大函数，独立出来的函数有助于代码复用/覆写/逻辑清晰<br /><code class=\"language-text\">&lt;br /&gt;//bad case&lt;br /&gt;var getUserInfo = function(){&lt;br /&gt;  ajax( &#39;http:// xxx.com/userInfo&#39;, function( data ){&lt;br /&gt;    console.log( &#39;userId: &#39; + data.userId );&lt;br /&gt;    console.log( &#39;userName: &#39; + data.userName );&lt;br /&gt;    console.log( &#39;nickName: &#39; + data.nickName );&lt;br /&gt;  });&lt;br /&gt;};&lt;br /&gt;</code><br />改成：<br /><code class=\"language-text\">&lt;br /&gt;//good case&lt;br /&gt;var getUserInfo = function(){&lt;br /&gt;  ajax( &#39;http:// xxx.com/userInfo&#39;, function( data ){&lt;br /&gt;  \tprintDetails( data );&lt;br /&gt;  });&lt;br /&gt;};&lt;br /&gt;var printDetails = function( data ){&lt;br /&gt;  console.log( &#39;userId: &#39; + data.userId );&lt;br /&gt;  console.log( &#39;userName: &#39; + data.userName );&lt;br /&gt;  console.log( &#39;nickName: &#39; + data.nickName );&lt;br /&gt;};&lt;br /&gt;</code><br />#### 合并重复条件片段<br />如果一个函数体内有一些条件分支语句，而这些条件分支语句内部散布了一些重复的代码，<br />那么就有必要进行合并去重工作。<br /><code class=\"language-text\">&lt;br /&gt;//bad case&lt;br /&gt;var paging = function( currPage ){&lt;br /&gt;  if ( currPage &lt;= 0 ){&lt;br /&gt;    currPage = 0;&lt;br /&gt;    jump( currPage ); // 跳转&lt;br /&gt;  }else if ( currPage &gt;= totalPage ){&lt;br /&gt;    currPage = totalPage;&lt;br /&gt;    jump( currPage ); // 跳转&lt;br /&gt;  }else{&lt;br /&gt;    jump( currPage ); // 跳转&lt;br /&gt;  }&lt;br /&gt;};&lt;br /&gt;</code><br />改成<br /><code class=\"language-text\">&lt;br /&gt;//good case&lt;br /&gt;var paging = function( currPage ){&lt;br /&gt;  if ( currPage &lt;= 0 ){&lt;br /&gt;  \tcurrPage = 0;&lt;br /&gt;  }else if ( currPage &gt;= totalPage ){&lt;br /&gt;  \tcurrPage = totalPage;&lt;br /&gt;  }&lt;br /&gt;  jump( currPage ); // 把jump 函数独立出来&lt;br /&gt;};&lt;br /&gt;</code><br />#### 把条件分支语句提炼出函数<br />复杂的条件分支语句是导致程序难以阅读和理解的重要原因，而且容易导致<br />一个庞大的函数,把逻辑判断代码提炼成一个单独的函数，既能更准确地表达代码的意思，<br />函数名本身又能起到注释的作用。<br /><code class=\"language-text\">&lt;br /&gt;//bad case&lt;br /&gt;var getPrice = function( price ){&lt;br /&gt;\tvar date = new Date();&lt;br /&gt;\tif ( date.getMonth() &gt;= 6 &amp;&amp; date.getMonth() &lt;= 9 ){ // 夏天&lt;br /&gt;  return price * 0.8;&lt;br /&gt;\t}\t&lt;br /&gt;\treturn price;&lt;br /&gt;};&lt;br /&gt;</code><br />改成:<br /><code class=\"language-text\">&lt;br /&gt;//good case&lt;br /&gt;var isSummer = function(){&lt;br /&gt;    var date = new Date();&lt;br /&gt;    return date.getMonth() &gt;= 6 &amp;&amp; date.getMonth() &lt;= 9;&lt;br /&gt;};&lt;br /&gt;\n&lt;br /&gt;var getPrice = function( price ){&lt;br /&gt;  if ( isSummer() ){ // 夏天&lt;br /&gt;  \treturn price * 0.8;&lt;br /&gt;  }&lt;br /&gt;  return price;&lt;br /&gt;};&lt;br /&gt;</code><br />\n<br />#### 合理使用循环<br />在函数体内，如果有些代码实际上负责的是一些重复性的工作，那么合理利用循环不仅可以<br />完成同样的功能，还可以使代码量更少。<br /><code class=\"language-text\">&lt;br /&gt;//bad case&lt;br /&gt;var createXHR = function(){&lt;br /&gt;  var xhr;&lt;br /&gt;  try{&lt;br /&gt;    xhr = new ActiveXObject( &#39;MSXML2.XMLHttp.6.0&#39; );&lt;br /&gt;  }catch(e){&lt;br /&gt;    try{&lt;br /&gt;      xhr = new ActiveXObject( &#39;MSXML2.XMLHttp.3.0&#39; );&lt;br /&gt;    }catch(e){&lt;br /&gt;      xhr = new ActiveXObject( &#39;MSXML2.XMLHttp&#39; );&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;  return xhr;&lt;br /&gt;};&lt;br /&gt;var xhr = createXHR();&lt;br /&gt;</code><br />改成：<br /><code class=\"language-text\">&lt;br /&gt;//good case&lt;br /&gt;var createXHR = function(){&lt;br /&gt;var versions= [ &#39;MSXML2.XMLHttp.6.0ddd&#39;, &#39;MSXML2.XMLHttp.3.0&#39;, &#39;MSXML2.XMLHttp&#39; ];&lt;br /&gt;for ( var i = 0, version; version = versions[ i++ ]; ){&lt;br /&gt;  try{&lt;br /&gt;   return new ActiveXObject( version );&lt;br /&gt;  }catch(e){&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;};&lt;br /&gt;</code><br />#### 提前让函数退出代替嵌套条件分支，条件退出前置<br />挑选一些条件分支，在进入这些条件分支之后，就立即让这个函数退出。避免过于复杂的嵌套条件分支语句。<br /><code class=\"language-text\">&lt;br /&gt;//bad case&lt;br /&gt;var del = function( obj ){&lt;br /&gt;  var ret;&lt;br /&gt;  if ( !obj.isReadOnly ){ // 不为只读的才能被删除&lt;br /&gt;      if ( obj.isFolder ){ // 如果是文件夹&lt;br /&gt;          ret = deleteFolder( obj );&lt;br /&gt;      }else if ( obj.isFile ){ // 如果是文件&lt;br /&gt;          ret = deleteFile( obj );&lt;br /&gt;      }&lt;br /&gt;  }&lt;br /&gt;  return ret;&lt;br /&gt;};&lt;br /&gt;</code><br />改成：<br /><code class=\"language-text\">&lt;br /&gt;//good case&lt;br /&gt;var del = function( obj ){&lt;br /&gt;  if ( obj.isReadOnly ){ // 反转if 表达式&lt;br /&gt;  \treturn;&lt;br /&gt;  }&lt;br /&gt;  if ( obj.isFolder ){&lt;br /&gt;  \treturn deleteFolder( obj );&lt;br /&gt;  }&lt;br /&gt;  if ( obj.isFile ){&lt;br /&gt;  \treturn deleteFile( obj );&lt;br /&gt;  }&lt;br /&gt;};&lt;br /&gt;</code><br />#### 传递对象参数代替过长的参数列表<br />有时候一个函数有可能接收多个参数，而参数的数量越多，函数就越难理解和使用。我们可以把参数都放入一个对象内,需要的数据可以自行从该对象里获取,不用再关心参数的数量和顺序.<br /><code class=\"language-text\">&lt;br /&gt;//bad case&lt;br /&gt;var setUserInfo = function( id, name, address, sex, mobile, qq ){&lt;br /&gt;console.log( &#39;id= &#39; + id );&lt;br /&gt;  console.log( &#39;name= &#39; +name );&lt;br /&gt;  console.log( &#39;address= &#39; + address );&lt;br /&gt;  console.log( &#39;sex= &#39; + sex );&lt;br /&gt;  console.log( &#39;mobile= &#39; + mobile );&lt;br /&gt;  console.log( &#39;qq= &#39; + qq );&lt;br /&gt;};&lt;br /&gt;setUserInfo( 1314, &#39;sven&#39;, &#39;shenzhen&#39;, &#39;male&#39;, &#39;137********&#39;, 377876679 );&lt;br /&gt;</code><br />改成：<br /><code class=\"language-text\">&lt;br /&gt;//good case&lt;br /&gt;var setUserInfo = function( obj ){&lt;br /&gt;  console.log( &#39;id= &#39; + obj.id );&lt;br /&gt;  console.log( &#39;name= &#39; + obj.name );&lt;br /&gt;  console.log( &#39;address= &#39; + obj.address );&lt;br /&gt;  console.log( &#39;sex= &#39; + obj.sex );&lt;br /&gt;  console.log( &#39;mobile= &#39; + obj.mobile );&lt;br /&gt;  console.log( &#39;qq= &#39; + obj.qq );&lt;br /&gt;};&lt;br /&gt;setUserInfo({&lt;br /&gt;  id: 1314,&lt;br /&gt;  name: &#39;sven&#39;,&lt;br /&gt;  address: &#39;shenzhen&#39;,&lt;br /&gt;  sex: &#39;male&#39;,&lt;br /&gt;  mobile: &#39;137********&#39;,&lt;br /&gt;  qq: 377876679&lt;br /&gt;});&lt;br /&gt;</code><br />#### 尽量减少参数数量<br />如果调用一个函数时需要传入多个参数，那这个函数是让人望而生畏的，我们必须搞清楚这<br />些参数代表的含义，必须小心翼翼地把它们按照顺序传入该函数。实际开发中，向函数传递参数不可避免，但我们应该尽量减少函数接收的参数数量。<br /><code class=\"language-text\">&lt;br /&gt;//bad case&lt;br /&gt;var draw = function( width, height, square ){};&lt;br /&gt;</code><br />改成：<br /><code class=\"language-text\">&lt;br /&gt;//good case&lt;br /&gt;var draw = function( width, height ){&lt;br /&gt;  var square = width * height;&lt;br /&gt;};&lt;br /&gt;</code><br />#### 少用三目运算符<br />有一些程序员喜欢大规模地使用三目运算符，来代替传统的if、else。但是有些时候要保证代码可读性和可维护性，尽量少用三目运算符。<br /><code class=\"language-text\">&lt;br /&gt;//bad case&lt;br /&gt;var global = typeof window !== &quot;undefined&quot; ? window : this;&lt;br /&gt;</code><br />改成：<br /><code class=\"language-text\">&lt;br /&gt;//good case&lt;br /&gt;var global = null;&lt;br /&gt;if (typeof window !== &quot;undefined&quot;) {&lt;br /&gt;\tglobal = window;&lt;br /&gt;else{&lt;br /&gt;\tglobal = this;&lt;br /&gt;}&lt;br /&gt;</code><br />#### 合理使用链式调用<br />链式调用的方式并不会造成太多阅读上的困难，也能省下一些字符和中间变量。链式调用带来的坏处就是在调试的时候非常不方便，如果我们知道一条链中有错误出现，必须得先把这条链拆开才能加上一些调试log 或者增加断点，这样才能定位错误出现的地方。如果该链条的结构相对稳定，后期不易发生修改，那么使用链式调用无可厚非。但如果该链条很容易发生变化，导致调试和维护困难，那么还是建议使用普通调用的形式。<br /><code class=\"language-text\">&lt;br /&gt;//bad case&lt;br /&gt;var User = {&lt;br /&gt;  id: null,&lt;br /&gt;  name: null,&lt;br /&gt;  setId: function( id ){&lt;br /&gt;    this.id = id;&lt;br /&gt;    return this;&lt;br /&gt;  },&lt;br /&gt;  setName: function( name ){&lt;br /&gt;    this.name = name;&lt;br /&gt;    return this;&lt;br /&gt;  }&lt;br /&gt;};&lt;br /&gt;console.log( User.setId( 1314 ).setName( &#39;sven&#39; ) );&lt;br /&gt;</code><br />改成：<br /><code class=\"language-text\">&lt;br /&gt;//good case&lt;br /&gt;var user = new User();&lt;br /&gt;user.setId( 1314 );&lt;br /&gt;user.setName( &#39;sven&#39; );&lt;br /&gt;</code><br />\n<br />#### 分解大型类<br />如果一个类的职责太大了，实际上它的职责完全有必要拆成多个的类存在，面向对象设计鼓励将行为分布在合理数量的更小对象。<br /><code class=\"language-text\">&lt;br /&gt;//bad case&lt;br /&gt;var Spirit = function( name ){&lt;br /&gt;  this.name = name;&lt;br /&gt;};&lt;br /&gt;Spirit.prototype.attack = function( type ){ // 攻击&lt;br /&gt;  if ( type === &#39;waveBoxing&#39; ){&lt;br /&gt;   console.log( this.name + &#39;: 使用波动拳&#39; );&lt;br /&gt;  }else if( type === &#39;whirlKick&#39; ){&lt;br /&gt;    console.log( this.name + &#39;: 使用旋风腿&#39; );&lt;br /&gt;  }&lt;br /&gt;};&lt;br /&gt;var spirit = new Spirit( &#39;RYU&#39; );&lt;br /&gt;spirit.attack( &#39;waveBoxing&#39; ); // 输出：RYU: 使用波动拳&lt;br /&gt;spirit.attack( &#39;whirlKick&#39; ); // 输出：RYU: 使用旋风腿&lt;br /&gt;</code><br />改为：<br /><code class=\"language-text\">&lt;br /&gt;//good case&lt;br /&gt;var Attack = function( spirit ){&lt;br /&gt;  this.spirit = spirit;&lt;br /&gt;};&lt;br /&gt;Attack.prototype.start = function( type ){&lt;br /&gt;  return this.list[ type ].call( this );&lt;br /&gt;};&lt;br /&gt;Attack.prototype.list = {&lt;br /&gt;  waveBoxing: function(){&lt;br /&gt;    console.log( this.spirit.name + &#39;: 使用波动拳&#39; );&lt;br /&gt;  },&lt;br /&gt;  whirlKick: function(){&lt;br /&gt;    console.log( this.spirit.name + &#39;: 使用旋风腿&#39; );&lt;br /&gt;  }&lt;br /&gt;};&lt;br /&gt;\n&lt;br /&gt;var Spirit = function( name ){&lt;br /&gt;  this.name = name;&lt;br /&gt;  this.attackObj = new Attack( this );&lt;br /&gt;};&lt;br /&gt;Spirit.prototype.attack = function( type ){ // 攻击&lt;br /&gt;  this.attackObj.start( type );&lt;br /&gt;};&lt;br /&gt;var spirit = new Spirit( &#39;RYU&#39; );&lt;br /&gt;spirit.attack( &#39;waveBoxing&#39; ); // 输出：RYU: 使用波动拳&lt;br /&gt;spirit.attack( &#39;whirlKick&#39; ); // 输出：RYU: 使用旋风腿&lt;br /&gt;</code><br />\n<br />#### 用return 退出多重循环<br />假设在函数体内有一个两重循环语句，我们需要在内层循环中判断，当达到某个临界条件时<br />退出外层的循环。我们大多数时候会引入一个控制标记变量,但这做法无疑都让人头晕目眩，更简单的做法是在需要中止循环的时候直接退出整个方法。<br /><code class=\"language-text\">&lt;br /&gt;//bad case&lt;br /&gt;var func = function(){&lt;br /&gt;var flag = false;&lt;br /&gt;for ( var i = 0; i &lt; 10; i++ ){&lt;br /&gt;  for ( var j = 0; j &lt; 10; j++ ){&lt;br /&gt;      if ( i * j &gt;30 ){&lt;br /&gt;        flag = true;&lt;br /&gt;        break;&lt;br /&gt;      }&lt;br /&gt;    }&lt;br /&gt;    if ( flag === true ){&lt;br /&gt;      break;&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;};&lt;br /&gt;</code><br />改成：<br /><code class=\"language-text\">&lt;br /&gt;//good case&lt;br /&gt;var func = function(){&lt;br /&gt;  for ( var i = 0; i &lt; 10; i++ ){&lt;br /&gt;    for ( var j = 0; j &lt; 10; j++ ){&lt;br /&gt;      if ( i * j &gt;30 ){&lt;br /&gt;        return;&lt;br /&gt;      }&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;};&lt;br /&gt;</code><br />\n<br />### 总结<br />很早些年其实看了不少次《设计模式》系列的书籍，但是以前项目经验太少，也因为代码写的少，对代码设计这块其实领悟得不够多。如今做了一段时间后回顾这块内容的时候，对自己在代码设计以及重构方面还是有了很大的帮助。后续还是要怀抱着对代码的敬畏之心，好好写好自己的代码。</p>","frontmatter":{"title":"前端Js的设计模式和重构方法","date":"2020-07-26","description":null}}},"pageContext":{"slug":"/techblog/xyhxxs/","previous":{"fields":{"slug":"/techblog/mssrgb/"},"frontmatter":{"title":"天气真好","date":"2020-07-24"}},"next":{"fields":{"slug":"/techblog/fciirz/"},"frontmatter":{"title":"123123312","date":"2020-07-26"}}}}}