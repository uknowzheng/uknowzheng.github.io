{"componentChunkName":"component---src-templates-blog-post-js","path":"/post/2020-07-26/techblog/xyhxxs/","result":{"data":{"site":{"siteMetadata":{"title":"～ 全栈小黄人吖 ～","subTitle":"专注于前后端打通的固体移动工程师","description":"tech blog","author":"uknowzheng","social":{"github":"//github.com/uknowzheng"}}},"markdownRemark":{"id":"660ccb46-76bc-59ba-bf2b-c36a44222827","excerpt":"…","html":"<p><a name=\"8e1b944f\"></a></p>\n<h3>背景</h3>\n<p><br />为什么突然想写前端编码中的设计模式呢？国庆期间自己思考了下设计模式在日常开发中的用法以及代码重构的技巧。于是乎整理了下这篇文章跟大家分享下前端这块的设计模式以及一些代码重构的思路。设计模式的玄学还是得在很多个项目中去实战总结思考才能领悟到。<br /></p>\n<p><a name=\"301a1997\"></a></p>\n<h3>设计模式</h3>\n<p><br />设计模式是大家日常开发中面向对象比较长谈的代码结构的设计方式，主要规范了我们平时开发过程中的代码设计原则，这里列举下比较重要的几个原则：<br /></p>\n<ul>\n<li>开闭原则(OCP)：对于组件功能的扩展是开放的,对于原有代码的修改是封闭的。</li>\n<li>单一职责原则(SRP)：一个类只负责一项职责。</li>\n<li>里氏替换原则(LSP)：子类可以扩展父类的功能，但不能改变父类原有的功能。</li>\n<li>依赖倒置原则(DIP)：面向接口编程，不针对实现编程。</li>\n<li>接口隔离原则(ISP)：每一个接口都应该承担相对独立的角色。</li>\n<li>最少知识原则(LoD)：降低系统耦合，使类与类之间的结构松散。<br />正常看了这么多原则，没写过大量业务项目代码的话，真的是比较难理解这些思想，当然作为从Java转到Javascript这块坑的我最大的感受是从约束很严格的语言转到一门非常灵活的语言上。但是设计模式的思想还是通用的，依旧能够借助其思想去解决业务设计上的一些问题。</li>\n</ul>\n<p><a name=\"ba23997d\"></a></p>\n<h4>常见的设计模式</h4>\n<p><br />一般常见的设计模式有如下24中类：</p>\n<table>\n<thead>\n<tr>\n<th>创建型</th>\n<th>结构型</th>\n<th>行为型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单例模式</td>\n<td>代理模式</td>\n<td>迭代器模式</td>\n</tr>\n<tr>\n<td>抽象工厂模式</td>\n<td>组合模式</td>\n<td>模版方法模式</td>\n</tr>\n<tr>\n<td>简单工厂模式</td>\n<td>适配器模式</td>\n<td>访问者模式</td>\n</tr>\n<tr>\n<td>工厂方法模式</td>\n<td>桥接模式</td>\n<td>解释器模式</td>\n</tr>\n<tr>\n<td>构建器模式</td>\n<td>装饰器模式</td>\n<td>责任链模式</td>\n</tr>\n<tr>\n<td>原型模式</td>\n<td>外观模式</td>\n<td>备案录模式</td>\n</tr>\n<tr>\n<td></td>\n<td>享元模式</td>\n<td>中介者模式</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>状态模式</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>观察者模式</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>命令模式</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>策略模式</td>\n</tr>\n</tbody>\n</table>\n<p><br />下面我会用ES6来编写这几种设计模式：<br /></p>\n<p><a name=\"d7b229c4\"></a></p>\n<h4>创建型模式</h4>\n<p><a name=\"fb7a820b\"></a></p>\n<h5>单例模式模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048572328-03c3cb5e-0e65-48f9-af1c-90711864af9b.png#align=left&#x26;display=inline&#x26;height=172&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=172&#x26;originWidth=387&#x26;status=done&#x26;style=none&#x26;width=387\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Singleton {\n    static getInstance() {\n        if (!Singleton.instance) {\n            Singleton.instance = new Singleton();\n        }\n        return Singleton.instance;\n    }\n   \n    method(){\n        console.log(&quot;hello world!&quot;);\n    }\n}\nlet obj = Singleton.getInstance();</code></pre></div>\n<p><a name=\"b41b9f61\"></a></p>\n<h5>简单工厂模式</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Car {\n    constructor(options) {\n        options = options || &quot;&quot;;\n        this.doors = options.doors || 4;\n        this.state = options.state || &quot;brand new&quot;;\n        this.color = options.color || &quot;silver&quot;;\n    }\n}\nclass CarFactory {\n    createCar(options) {\n        return new Car(options);\n    }\n}\nconst carFactory = new CarFactory();\nconst car = carFactory.createCar({\n    objType: &quot;car&quot;,\n    color: &quot;yellow&quot;,\n    doors: 4\n});</code></pre></div>\n<p><a name=\"0b9151cb\"></a></p>\n<h5>工厂方法模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048542931-7bf6f2d5-2fa6-4822-acea-0495efb1952a.png#align=left&#x26;display=inline&#x26;height=189&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=189&#x26;originWidth=580&#x26;status=done&#x26;style=none&#x26;width=580\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Car {\n    constructor(options) {\n        this.doors = options.doors || 4;\n        this.state = options.state || &quot;brand new&quot;;\n        this.color = options.color || &quot;silver&quot;;\n    }\n}\nclass BigCar extends Car {\n    constructor(options) {\n        super(options);\n    }\n}\nclass SmallCar extends Car {\n    constructor(options) {\n        super(options);\n    }\n}\nclass ObjectFactory {\n    constructor(Class) {\n        this.objClass = Class;\n    }\n    createObj(options) {\n        return new this.objClass(options);\n    }\n}\nclass BigCarFactory extends ObjectFactory{\n    constructor() {\n        super(BigCar);\n    }\n}\nclass SmallCarFactory extends ObjectFactory{\n    constructor() {\n        super(SmallCar);\n    }\n}\n//usage \nconst bigCarFactory = new BigCarFactory();\nconst bigCarObj = bigCarFactory.createObj({\n    color: &quot;yellow&quot;,\n    doors: 6\n});\nconst smallCarFactory = new SmallCarFactory();\nconst smallCarObj = smallCarFactory.createObj({\n    color: &quot;blue&quot;,\n    doors: 4\n});</code></pre></div>\n<p><a name=\"630a0087\"></a></p>\n<h5>抽象工厂模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048473433-f364ae3d-9c0b-44b1-acec-792c674eb4d1.png#align=left&#x26;display=inline&#x26;height=393&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=393&#x26;originWidth=857&#x26;status=done&#x26;style=none&#x26;width=857\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Car {}\nclass BigCar extends Car{}\nclass SmallCar extends Car{}\nclass Bike {}\nclass BigBike extends Bike{}\nclass SmallBike extends Bike{}\nclass Factory {\n    getCar(){\n    \tthrow new Error(&#39;子类实现&#39;)\n    }\n   \n     getBike(){\n    \tthrow new Error(&#39;子类实现&#39;)\n    }\n}\nclass BigFactory extends Factory {\n    getCar(){\n    \treturn new BigCar();\n    }\n   \n    getBike(){\n    \treturn new BigBike();\n    }\n}\nclass SmallFactory extends Factory {\n    getCar(){\n    \treturn new SmallCar();\n    }\n   \n    getBike(){\n    \treturn new SmallBike();\n    }\n}\n//usage \nconst bigFactory = new BigFactory();\nconst bigcar = bigFactory.getCar();\nconst bigbike = bigFactory.getBike();\nconst smallFactory = new SmallFactory();\nconst smallcar = smallFactory.getCar();\nconst smallbike = smallFactory.getBike();</code></pre></div>\n<p><a name=\"f48e3b1e\"></a></p>\n<h5>构建器模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048501573-370262f9-bca6-4c12-b1c8-f250dec9eada.png#align=left&#x26;display=inline&#x26;height=288&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=288&#x26;originWidth=480&#x26;status=done&#x26;style=none&#x26;width=480\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class CarBuilder {\n  constructor() {\n    this.engine = &#39;&#39;;\n    this.tyre = &#39;&#39;;\n    this.logo = &#39;&#39;;\n    Object.keys(this).forEach(key =&gt; {\n    \t//把每个属性名第一个字母大写并拼入set,构成setXXX\n      const setFuncName =  `set${key.substring(0,1).toUpperCase()}${key.substring(1)}`;\n      this[setFuncName] = value =&gt; {\n        this[key] = value;\n        return this;\n      }\n    })\n  }\n \n  //调用建造者\n  build() {\n    //取出所有属性非方法\n    const keysNoFunc = Object.keys(this).filter(key =&gt; typeof this[key] !== &#39;function&#39;);\n    return keysNoWithers.reduce((returnValue, key) =&gt; {\n      return {\n        ...returnValue,\n        [key]: this[key]\n      }\n    }, {});\n  }\n}\nconst car = new CarBuilder()\n  .setEngine(&quot;牛逼哄哄的引擎&quot;)\n  .setTyre(4)\n  .setLogo(&#39;蓝博基泥&#39;)\n  .build();\nconsole.log(car)</code></pre></div>\n<p><a name=\"ec3c9c8f\"></a></p>\n<h5>原型模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540049097505-a07e217d-b467-4667-8460-36a2ceeb9acd.png#align=left&#x26;display=inline&#x26;height=276&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=276&#x26;originWidth=519&#x26;status=done&#x26;style=none&#x26;width=519\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Person{\n  constructor(name) {\n    this.name = name;\n  }\n \n   clone(){\n      var that = Object.create(this.prototype);\n      var other = this.apply(that, arguments);\n      return (typeof other === &#39;object&#39; &amp;&amp; other) ? other : that;\n   }\n}\nlet tom = new Person(&#39;tom&#39;);\nlet jerry = tom.clone(&#39;jerry&#39;);</code></pre></div>\n<p><a name=\"f203704d\"></a></p>\n<h4>结构型模式</h4>\n<p><a name=\"eb1dfda7\"></a></p>\n<h5>代理模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048633796-15202e70-57e2-4055-9539-c0ba901d3c90.png#align=left&#x26;display=inline&#x26;height=242&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=242&#x26;originWidth=580&#x26;status=done&#x26;style=none&#x26;width=580\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Master {\n  doSomething(args) {\n    console.log(&#39;Master do something...&#39; + args.name);\n  }\n}\nclass Proxy extends Master {\n  constructor() {\n    super();\n  }\n  doSomething(args) {\n    //do some other thing\n    console.log(&#39;proxy do something&#39;)\n    args.name = &#39;hello&#39;;\n    //master do something\n    super.doSomething(args)\n  }\n}\nconst proxy = new Proxy();\nproxy.doSomething();</code></pre></div>\n<p><a name=\"e546bc3d\"></a></p>\n<h5>组合模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048839546-314def10-f9bd-4851-b311-05929103ccdd.png#align=left&#x26;display=inline&#x26;height=362&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=362&#x26;originWidth=639&#x26;status=done&#x26;style=none&#x26;width=639\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Component {\n    constructor() {}\n    operation (){}\n    add (Component){}\n    remove (Component){}\n    getChild (key){}\n}\nclass Leaf extends Component {\n    constructor(name) {\n        super()\n        this.name = name\n    }\n    operation (){}\n}\nclass Composite extends Component {\n    constructor(name) {\n        super()\n        this.name = name\n        this.children = []\n        facade.log(&#39;Composite created&#39;)\n    }\n    operation (){\n        for(var i in this.children)\n            this.children[i].Operation()\n    }\n    add (Component){\n        this.children.push(Component)\n    }\n    remove (Component){\n        for(var i in this.children)\n            if(this.children[i] === Component)\n                this.children.splice(i, 1)\n    }\n    getChild (key){\n        return this.children[key]\n    }\n}\nconst composite1 = new Composite(&#39;C1&#39;)\ncomposite1.Add(new Leaf(&#39;L1&#39;))\ncomposite1.Add(new Leaf(&#39;L2&#39;))\nconst composite2 = new Composite(&#39;C2&#39;)\ncomposite2.Add(composite1)\ncomposite1.GetChild(1).Operation()\ncomposite2.Operation()</code></pre></div>\n<p><a name=\"0afd573a\"></a></p>\n<h5>适配器模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048928458-6456fd90-22fa-47f3-b45a-79b057c311f8.png#align=left&#x26;display=inline&#x26;height=277&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=277&#x26;originWidth=566&#x26;status=done&#x26;style=none&#x26;width=566\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class MediaPlayerInterface{\n    play(audioType,fileName){\n        throw &quot;播放方法,由子类实现&quot;\n    }\n}\nclass VlcPlayer{\n    playVlc(fileName){\n        console.log(`我是Vlc播放器文件名称是${fileName}`)\n    }\n    playMp4(fileName){}\n}\nclass Mp4Player{\n    playMp4(fileName){\n        console.log(`我是Mp4播放器文件名称是${fileName}`)\n    }\n}\nclass MediaPlayer extends MediaPlayerInterface{\n    play(audioType,fileName){\n        if(audioType==&quot;vlc&quot;)new VlcPlayer().playVlc(fileName);\n        if(audioType==&quot;mp4&quot;)new Mp4Player().playMp4(fileName);\n    }\n}\nclass Mp3Player{\n    playMp3(fileName){\n        console.log(`我是Mp3播放器文件名称是${fileName}`)\n    }\n}\nclass AudioPlayerAdapter extends MediaPlayerInterface{\n    constructor(mediaPlayer) {\n        super()\n        this.mediaPlayer = mediaPlayer;\n    }\n    play(audioType,fileName){\n      if(audioType===&quot;mp3&quot;){\n          new Mp3Player().playMp3(fileName);\n      }else{\n          this.mediaPlayer.play(audioType,fileName);\n      }\n    }\n}\nconst mediaPlayer = new MediaPlayer()\naudioPlayer.play(&quot;mp4&quot;, &quot;alone.mp4&quot;);\naudioPlayer.play(&quot;vlc&quot;, &quot;far far away.vlc&quot;);\n//某天要新增mp3播放器，那么只需要套一层适配器\nvar audioPlayer = new AudioPlayerAdapter(mediaPlayer);\naudioPlayer.play(&quot;mp3&quot;, &quot;beyond the horizon.mp3&quot;);</code></pre></div>\n<p><a name=\"ef6b370c\"></a></p>\n<h5>外观模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048810903-904f8cb4-84cf-427c-9438-107db7cb27ed.png#align=left&#x26;display=inline&#x26;height=300&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=300&#x26;originWidth=564&#x26;status=done&#x26;style=none&#x26;width=564\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Facade {\n    _getUserName() {\n        console.log(&quot;current user:&quot; + this.name);\n    }\n    _setUserName(name) {\n        this.name = name;\n    }\n    _run() {\n        console.log(&quot;running&quot;);\n    }\n    _jump() {\n        console.log(&quot;jumping&quot;);\n    }\n    facade(args) {\n    \tlet {run,name,jump} = args;\n        this._setUserName(name);\n        this._getUserName();\n        if (run) {\n            this._run();\n        }\n        if (jump) {\n            this._jump();\n        }\n    }\n}\nlet facadeObj = new Facade();\nfacadeObj.facade({ run: true, jump: true ,name:&#39;uk&#39; });</code></pre></div>\n<p><a name=\"baa7db90\"></a></p>\n<h5>装饰器模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048819742-4877b75a-26b5-4a3c-ac35-aa612c1e1135.png#align=left&#x26;display=inline&#x26;height=364&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=364&#x26;originWidth=579&#x26;status=done&#x26;style=none&#x26;width=579\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class MacBook {\n    cost() {\n        return 997;\n    }\n}\nfunction Memory(macbook) {\n    let v = macbook.cost();\n    macbook.cost = function() {\n        return v + 75;\n    };\n    return macbook;\n}\nfunction Engraving(macbook) {\n    let v = macbook.cost();\n    macbook.cost = function() {\n        return v + 200;\n    };\n    return macbook;\n}\nfunction Insurance(macbook) {\n    let v = macbook.cost();\n    macbook.cost = function() {\n        return v + 250;\n    };\n    return macbook;\n}\nlet mb = new MacBook();\nmb = Memory(mb);//加内存\nmb = Engraving(mb);//加刻字\nmb = Insurance(mb);//加保险\nconsole.log(mb.cost());// 总计: 1522</code></pre></div>\n<p><a name=\"e7c0c21d\"></a></p>\n<h5>桥接模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048856475-d005e6f6-df6a-4f8a-a86e-3f91d17cd68b.png#align=left&#x26;display=inline&#x26;height=309&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=309&#x26;originWidth=628&#x26;status=done&#x26;style=none&#x26;width=628\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class DrawAPI {\n   drawCircle(radius,x, y){\n    throw &quot;抽象方法&quot;\n   }\n}\nclass RedCircle extends DrawAPI {\n    drawCircle( radius,  x,  y) {\n     console.log(&quot;Drawing Circle[ color: red, radius: &quot; + radius + &quot;, x: &quot; + x + &quot;, &quot; + y + &quot;]&quot;);\n    }\n}\nclass GreenCircle extends DrawAPI {\n    drawCircle( radius,  x,  y) {\n      console.log(&quot;Drawing Circle[ color: green, radius: &quot; + radius + &quot;, x: &quot; + x + &quot;, &quot; + y + &quot;]&quot;);\n    }\n}\n \nclass Shape {\n    constructor(drawAPI) {\n        this.drawAPI = drawAPI;\n    }\n    draw(){\n         this.drawAPI.drawCircle(this.x,this.y,this.radius)\n    }\n}\nclass Circle extends Shape{\n    constructor(x, y, radius, drawAPI){\n        super(drawAPI);\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n    }\n}\n//将实际Circle渲染的实现与Circle定义进行分离\nconst redCircle = new Circle(100,1000, 10, new RedCircle());//画红圆\nconst greenCircle = new Circle(100,100, 10, new GreenCircle());//画绿圆\nredCircle.draw();\ngreenCircle.draw();</code></pre></div>\n<p><a name=\"3c737b3f\"></a></p>\n<h5>享元模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540049044757-3e63a749-5349-4a81-8e52-dd3b94c1cc0e.png#align=left&#x26;display=inline&#x26;height=411&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=411&#x26;originWidth=683&#x26;status=done&#x26;style=none&#x26;width=683\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Flyweight {\n    constructor(make, model, processor){\n      this.make = make;\n      this.model = model;\n      this.processor = processor;\n    }\n};\nclass FlyWeightFactory {\n    constructor(){\n      flyweights = {};\n    }\n    get(make, model, processor) {\n      if (!flyweights[make + model]) {\n          flyweights[make + model] = new Flyweight(make, model, processor);\n      }\n      return flyweights[make + model];\n    }\n   \n    getCount() {\n      let count = 0;\n      for (let f in flyweights) count++;\n      return count;\n    }\n};\n class Computer {\n   constructor (make, model, processor, memory, tag){\n      this.flyweight = FlyWeightFactory.get(make, model, processor);\n      this.memory = memory;\n      this.tag = tag;\n   }\n}\nclass ComputerCollection {\n   constructor(){\n      var computers = {};\n      var count = 0;\n   }\n   add(make, model, processor, memory, tag){\n      computers[tag] = new Computer(make, model, processor, memory, tag);\n      count++;\n   }\n    get(tag){\n      return computers[tag];\n    }\n    getCount() {\n      return count;\n    }\n}\nvar computers = new ComputerCollection();\ncomputers.add(&quot;Dell&quot;, &quot;Studio XPS&quot;, &quot;Intel&quot;, &quot;5G&quot;, &quot;Y755P&quot;);\ncomputers.add(&quot;Dell&quot;, &quot;Studio XPS&quot;, &quot;Intel&quot;, &quot;6G&quot;, &quot;X997T&quot;);\ncomputers.add(&quot;Dell&quot;, &quot;Studio XPS&quot;, &quot;Intel&quot;, &quot;2G&quot;, &quot;U8U80&quot;);\ncomputers.add(&quot;Dell&quot;, &quot;Studio XPS&quot;, &quot;Intel&quot;, &quot;2G&quot;, &quot;NT777&quot;);\ncomputers.add(&quot;Dell&quot;, &quot;Studio XPS&quot;, &quot;Intel&quot;, &quot;2G&quot;, &quot;0J88A&quot;);\ncomputers.add(&quot;HP&quot;, &quot;Envy&quot;, &quot;Intel&quot;, &quot;4G&quot;, &quot;CNU883701&quot;);\ncomputers.add(&quot;HP&quot;, &quot;Envy&quot;, &quot;Intel&quot;, &quot;2G&quot;, &quot;TXU003283&quot;);\nconsole.log(&quot;Computers: &quot; + computers.getCount());\n//count = 7;\nconsole.log(&quot;Flyweights: &quot; + FlyWeightFactory.getCount());\n//count = 2; 这里把品牌/型号/处理器都抽成共享单元了\n//[(&quot;Dell&quot;, &quot;Studio XPS&quot;, &quot;Intel&quot;),(&quot;HP&quot;, &quot;Envy&quot;, &quot;Intel&quot;)]</code></pre></div>\n<p><a name=\"0df886f3\"></a></p>\n<h4>行为型模式</h4>\n<p><a name=\"7f10b11f\"></a></p>\n<h5>策略模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048612724-086d8064-c162-43e1-8781-53a705c52969.png#align=left&#x26;display=inline&#x26;height=205&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=205&#x26;originWidth=551&#x26;status=done&#x26;style=none&#x26;width=551\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Checker {\n  constructor(check, instructions) {\n     this.check = check;\n     this.instructions = instructions;\n  }\n}\nclass Validator {\n  constructor(config) {\n    this.config = config,\n    this.messages = {};\n  }\n  validate(data) {\n    for (let key in data) {\n      let value = data[key];\n      let type = this.config[key];\n      if (!type) {\n      \tcontinue;\n      }\n      let checker = Validator[type];\n      if (!checker) {\n      \tthrow new Error(`No handler to validate type ${type}`);\n      }\n      let result = checker.check(value);\n      if (!result) {\n      \tthis.messages.push(checker.instructions + ` **${value}**`);\n      }\n    }\n  }\n  hasError() {\n    return this.messages.length !== 0;\n  }\n}\nlet data = {\n   first_name:&#39;Super&#39;,\n   last_name:&#39;Man&#39;,\n   age:&#39;unknown&#39;,\n   username:&#39;uk&#39;\n};\nlet config = {\n  first_name:&#39;isNonEmpty&#39;,\n  age:&#39;isNumber&#39;,\n  username:&#39;isAlphaNum&#39;\n};\nValidator.isNumber = new Checker((val) =&gt; !isNaN(val), &#39;the value can only be a valid number&#39;);\nValidator.isNonEmpty = new Checker((val) =&gt; val !== &quot;&quot;, &#39;the value can not be empty&#39;);\nValidator.isAlphaNum = new Checker((val) =&gt; !/^a-z0-9/i.test(val), &#39;the value can not have special symbols&#39;);\nlet validator = new Validator(config);\nvalidator.validate(data);\nconsole.log(validator.hasError());// true\nconsole.log(validator.messages.join(&#39;\\n&#39;)); // the value can only be a valid number **unknown**</code></pre></div>\n<p><a name=\"de2a2941\"></a></p>\n<h5>迭代器模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048677832-ba96921d-fdc6-4980-9b1b-d7a42e802cc9.png#align=left&#x26;display=inline&#x26;height=348&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=348&#x26;originWidth=548&#x26;status=done&#x26;style=none&#x26;width=548\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class IteratorArray {\n  constructor(array) {\n    super();\n    this.data = array;\n  }\n \n  [Symbol.iterator](){\n    let index = 0;\n    return {\n      next: () =&gt; {\n        if (index &lt; this.data.length) {\n            return {\n            \tvalue: this.data[index++],\n                done: false\n            };\n        }\n        return {\n             value: undefined,\n             done: true\n        };\n      },\n      hasNext: () =&gt; index &lt; this.data.length,\n      rewind: () =&gt; index = 0,\n      current: () =&gt; {\n        index -= 1;\n        if (index &lt; this.data.length) {\n            return {\n            \tvalue: this.data[index++],\n                done: false\n            };\n        }\n        return {\n        \tvalue: undefined,\n            \tdone: true};\n      \t}\n    }\n  }\n}\nconst iteratorArray = new IteratorArray([1,2,3,4,5])\nconst iter = iteratorArray[Symbol.iterator]();\nconsole.log(iter.next()); // { value: 1, done: false }\nconsole.log(iter.next()); // { value: 2, done: false }\nconsole.log(iter.current());// { value: 2, done: false }\nconsole.log(iter.hasNext());// true\nconsole.log(iter.rewind()); // rewind!\nconsole.log(iter.next()); // { value: 1, done: false }\n// for...of\nfor (let value of iteratorArray) {\n  console.log(value);\n}</code></pre></div>\n<p><a name=\"ed69b1eb\"></a></p>\n<h5>观察者模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048699317-529aa40a-07f2-4e7b-8bd4-99f1b847e038.png#align=left&#x26;display=inline&#x26;height=325&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=325&#x26;originWidth=733&#x26;status=done&#x26;style=none&#x26;width=733\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Pubsub {\n    constructor(){\n        this.topics = {};\n    }\n    publish(name, args) {\n        if (!this.topics[name]) {\n            return false;\n        }\n  for(let key in this.topics[name]){\n        \tconst callback = this.topics[name];\n            callback(args);\n        }\n    }\n    subscribe(name, callback) {\n        if (!this.topics[name]) {\n            this.topics[name] = [];\n        }\n        this.topics[name].push(callback);\n    }\n   \n    unsubscribe(name,callback) {\n         if (!this.topics[name]) {\n            return false;\n         }\n         this.topics[name].remove(callback);\n    }\n}\nlet obj = {\n   callback:(message)=&gt;{\n    \tconsole.log(message);\n    }\n}\nlet pubsub = new Pubsub();\npubsub.subscribe(&quot;subscribe&quot;, obj.callback);\npubsub.publish(&quot;subscribe&quot;, &quot;hello all!&quot;);\n//obj console hello all!</code></pre></div>\n<p><a name=\"a5c7aeff\"></a></p>\n<h5>命令模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540049061395-6d28c48b-becf-4cf7-852a-3d96973c9252.png#align=left&#x26;display=inline&#x26;height=253&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=253&#x26;originWidth=666&#x26;status=done&#x26;style=none&#x26;width=666\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Command {\n  constructor(do,undo){\n        this.do = do;\n        this.undo = undo;\n    }\n    execute(){\n        this.do();\n    }\n   \n    undo(){\n      this.undo();\n    }\n}\nclass Commands {\n    constructor(){\n        this.commandsList = [];\n    }\n   \n    add( command ){\n\tthis.commandsList.push( command );\n    }\n   \n    execute(){\n      for (const command of this.commandsList){\n        command.execute();\n      }\n    }\n   \n    undo(){\n      for (const command of this.commandsList){\n        command.undo();\n      }\n    }\n}\n let sleepCommond = new Command(()=&gt;{\n  console.log(&#39;sleep&#39;)\n },()=&gt;{\n  console.log(&#39;wake up&#39;);\n });\n  let runCommond = new Command(()=&gt;{\n  console.log(&#39;run&#39;)\n },()=&gt;{\n  console.log(&#39;back&#39;);\n });\nconst commands = Commands();\ncommands.add( sleepCommond );\ncommands.add( runCommond );\ncommands.execute();\ncommands.undo();</code></pre></div>\n<p><a name=\"7b687d57\"></a></p>\n<h5>模版方法模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048744748-6832399d-7cb4-4743-9160-0f6e71875094.png#align=left&#x26;display=inline&#x26;height=276&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=276&#x26;originWidth=425&#x26;status=done&#x26;style=none&#x26;width=425\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Beverage {\n\tboilWater(){\n    console.log( &quot;煮一壶水&quot; );\n\t}\n\tbrew(){\n   throw new Error(&#39;具体由子类实现&#39;);\n\t}\n\tpourInCup(){\n   throw new Error(&#39;具体由子类实现&#39;);\n\t}\n\taddCondiments(){\n   throw new Error(&#39;具体由子类实现&#39;);\n\t}\n    go(){\n    \tboilWater();\n        brew();\n        pourInCup();\n        addCondiments();\n    }\n}\nclass Coffee extends Beverage{\n\tbrew() {\n   console.log( &quot;用沸水冲泡咖啡&quot; );\n\t}\n\tpourInCup(){\n    console.log( &quot;把咖啡倒进杯子&quot; );\n\t}\n\taddCondiments() {\n   console.log( &quot;加糖和牛奶&quot; );\n\t}\n}\nclass Tea extends Beverage{\n\tbrew() {\n   console.log( &quot;用沸水浸泡茶叶&quot; );\n\t}\n\tpourInCup(){\n    console.log( &quot;把茶倒进杯子&quot; );\n\t}\n\taddCondiments() {\n   console.log( &quot;加柠檬&quot; );\n\t}\n}\nconst coffee = new Coffee();\nconst tea = new Tea();\ncoffee.go();\ntea.go();</code></pre></div>\n<p><a name=\"c0e35df8\"></a></p>\n<h5>责任链模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540049020766-6cad3dc4-cfd5-4846-b695-1a1c90582b5b.png#align=left&#x26;display=inline&#x26;height=285&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=285&#x26;originWidth=407&#x26;status=done&#x26;style=none&#x26;width=407\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let order500 = function( orderType, pay, stock ){\n  if ( orderType === 1 &amp;&amp; pay === true ){\n    console.log( &#39;500 元定金预购，得到100 优惠券&#39; );\n  }else{\n    return &#39;next&#39;; // 我不知道下一个节点是谁，反正把请求往后面传递\n  }\n};\nlet order200 = function( orderType, pay, stock ){\n  if ( orderType === 2 &amp;&amp; pay === true ){\n    console.log( &#39;200 元定金预购，得到50 优惠券&#39; );\n  } else {\n    return &#39;next&#39;; // 我不知道下一个节点是谁，反正把请求往后面传递\n  }\n};\nlet orderNormal = function( orderType, pay, stock ){\n  if ( stock &gt; 0 ){\n    console.log( &#39;普通购买，无优惠券&#39; );\n  }else{\n    console.log( &#39;手机库存不足&#39; );\n  }\n};\nclass Chain {\n\tconstructor(){\n     this.fn = fn;\n   this.nextFunc = null;\n\t}\n\tsetNextFunc( nextFunc ){\n   return this.nextFunc = nextFunc;\n\t}\n\trun() {\n  var result = this.fn.apply( this, arguments );\n  if ( result === &#39;next&#39; ){\n  \treturn this.nextFunc &amp;&amp; this.nextFunc.run.apply( this.nextFunc, arguments);\n  }\n  return result;\n\t}\n}\nvar chainOrder500 = new Chain( order500 );\nvar chainOrder200 = new Chain( order200 );\nvar chainOrderNormal = new Chain( orderNormal );\n//构造处理链路\nchainOrder500.setNextFunc( chainOrder200 );\nchainOrder200.setNextFunc( chainOrderNormal );\nchainOrder500.run( 1, true, 500 ); // 输出：500 元定金预购，得到100 优惠券\nchainOrder500.run( 2, true, 500 ); // 输出：200 元定金预购，得到50 优惠券\nchainOrder500.run( 3, true, 500 ); // 输出：普通购买，无优惠券\nchainOrder500.run( 1, false, 0 ); // 输出：手机库存不足</code></pre></div>\n<p><a name=\"46991287\"></a></p>\n<h5>中介者模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048791779-f31ba263-9035-4cea-ae5a-d4a39d5271da.png#align=left&#x26;display=inline&#x26;height=205&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=205&#x26;originWidth=541&#x26;status=done&#x26;style=none&#x26;width=541\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> class ChatRoom {\n     constructor () {}\n   \n     showMessage (message) {\n         console.log(new Date(), user.getName(), message)\n     }\n }\n class User {\n     constructor (name){\n         this.name = name\n     }\n     setName () {\n         this.name = name\n     }\n     getName() {\n        return this.name\n     }\n     setRoom(room){\n      this.room = room; \n     }\n     sendMessage (message) {\n        room.showMessage(this, message)\n     }\n }\n //chatRoom将tom跟jack解耦\nconst chatRoom = ChatRoom();\nconst tom = new User(&quot;Tom Zhang&quot;);\ntom.setRoom(chatRoom);\ntom.sendMessage(&quot;My name is Tom&quot;);\n   \nconst jack = new User(&quot;Jack Chen&quot;);\njack.setRoom(chatRoom);\njack.sendMessage(&quot;My name is Jack&quot;);</code></pre></div>\n<p><a name=\"5ba313f4\"></a></p>\n<h5>状态模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048724295-88af7493-26de-4762-b4bf-ace6455d5059.png#align=left&#x26;display=inline&#x26;height=213&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=213&#x26;originWidth=568&#x26;status=done&#x26;style=none&#x26;width=568\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Context {\n    constructor () {\n        this.state = null\n    }\n   \n    setState(state) {\n        this.state = state\n    }\n   \n    getState() {\n        return this.state\n    }\n   \n}\nclass State {\n    doAction(context) {\n         throw new Error(&#39;具体子类去实现状态&#39;)\n    }\n}\nclass StartState extends State {\n    constructor () {\n        super()\n        this.context = null\n    }\n   \n    doAction(context) {\n        console.log(&#39;this is start state&#39;);\n        context.setState(this)\n    }\n   \n    printState() {\n         console.log(&#39;start state&#39;)\n    }\n}\nclass StopState extends State {\n    constructor() {\n        super()\n        this.context = null\n    }\n   \n    doAction(context) {\n        console.log(&#39;this is stop state&#39;);\n        context.setState(this)\n    }\n   \n    printState() {\n         console.log(&#39;stop state&#39;)\n    }\n}\nclass LoadingState extends State {\n    constructor() {\n        super()\n        this.context = null\n    }\n   \n    doAction(context) {\n        console.log(&#39;this is loading state&#39;);\n        context.setState(this)\n    }\n   \n    printState() {\n         console.log(&#39;loading state&#39;)\n    }\n}\nconst context = new Context()\nlet startState = new StartState()\nstartState.doAction(context)\ncontext.getState().toStateStr()\n   \nlet stopState = new StopState()\nstopState.doAction(context)\ncontext.getState().toStateStr()\n   \nlet loadingState = new LoadingState()\nloadingState.doAction(context)\ncontext.getState().toStateStr()</code></pre></div>\n<p><a name=\"2ffc18d4\"></a></p>\n<h5>访问者模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048760442-628281c3-baab-450d-ac03-b6c650589fe7.png#align=left&#x26;display=inline&#x26;height=515&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=515&#x26;originWidth=749&#x26;status=done&#x26;style=none&#x26;width=749\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Visitor {\n   visit(target) {\n     console.log(`正在查${target.name}的水表`);\n   }\n}\nclass User{\n    constructor(name) {\n        this.name = name || &quot;&quot;;\n    }\n    accept(visitor) {\n    \tvisitor.visit(this);\n    }\n}\nlet user = new User(&#39;yaoxian&#39;);\nvar visitor = new Visitor();\nuser.accept( visitor );//正在查yaoxian的水表</code></pre></div>\n<p><a name=\"a5f18f3c\"></a></p>\n<h5>解释器模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048663064-d828aec7-e0e0-42ab-8a90-3b7864085b6c.png#align=left&#x26;display=inline&#x26;height=337&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=337&#x26;originWidth=517&#x26;status=done&#x26;style=none&#x26;width=517\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Context{\n   constructor(input) {\n      this.input = input;\n      this.output = 0;\n   }\n   \n    startsWith(str) {\n        return this.input.substr(0, str.length) === str;\n    }\n}\nclass Expression{\n    constructor(name, one, four, five, nine, multiplier) {\n        this.name = name;\n        this.one = one;\n        this.four = four;\n        this.five = five;\n        this.nine = nine;\n        this.multiplier = multiplier;\n    }\n   \n    interpret(context) {\n        if (context.input.length == 0) {\n            return;\n        }\n        else if (context.startsWith(this.nine)) {\n            context.output += (9 * this.multiplier);\n            context.input = context.input.substr(2);\n        }\n        else if (context.startsWith(this.four)) {\n            context.output += (4 * this.multiplier);\n            context.input = context.input.substr(2);\n        }\n        else if (context.startsWith(this.five)) {\n            context.output += (5 * this.multiplier);\n            context.input = context.input.substr(1);\n        }\n        while (context.startsWith(this.one)) {\n            context.output += (1 * this.multiplier);\n            context.input = context.input.substr(1);\n        }\n    }\n}\nconst roman = &quot;MCMXXVIII&quot;\nconst context = new Context(roman);\nconst tree = [];\ntree.push(new Expression(&quot;thousand&quot;, &quot;M&quot;, &quot; &quot; , &quot; &quot;, &quot; &quot; , 1000));\ntree.push(new Expression(&quot;hundred&quot;, &quot;C&quot;, &quot;CD&quot;, &quot;D&quot;, &quot;CM&quot;, 100));\ntree.push(new Expression(&quot;ten&quot;, &quot;X&quot;, &quot;XL&quot;, &quot;L&quot;, &quot;XC&quot;, 10));\ntree.push(new Expression(&quot;one&quot;, &quot;I&quot;, &quot;IV&quot;, &quot;V&quot;, &quot;IX&quot;, 1));\nfor (var i = 0, len = tree.length; i &lt; len; i++) {\n  tree[i].interpret(context);\n}\nalert(roman + &quot; = &quot; + context.output);</code></pre></div>\n<p><a name=\"d22030b5\"></a></p>\n<h5>备案录模式</h5>\n<p><br /><img src=\"https://cdn.nlark.com/lark/0/2018/png/109645/1540048957948-75b2e902-8f79-45ec-9e96-eef2058839dd.png#align=left&#x26;display=inline&#x26;height=220&#x26;margin=%5Bobject%20Object%5D&#x26;originHeight=220&#x26;originWidth=660&#x26;status=done&#x26;style=none&#x26;width=660\"><br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class CacheUtil {\n   constructor() {\n      this.cache = {};\n   }\n     \n   requestData(url,callback){\n       if (cache[url]){\n          data = cache[url];\n          callback(data);\n      }else{\n          //模拟网络请求\n          setTimeout(()=&gt;{\n                cache[url] = data;\n                callback(data);\n          },3000);   \n      }\n   }\n}\nlet cache = new CacheUtil();\ncache.requestData(&#39;www.baidu.com&#39;,(data)=&gt;{console.log(data)});//请求\ncache.requestData(&#39;www.baidu.com&#39;,(data)=&gt;{console.log(data)});//从备忘录中获取</code></pre></div>\n<p><br />关于更多详细的设计模式说明可以到<a href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/#factorypatternjavascript\">《javascript pattern》</a>去查阅。<br /></p>\n<p><a name=\"318ab8ae\"></a></p>\n<h4>思考总结</h4>\n<p><br />针对上述的一些设计模式，对其解决问题场景提炼出思考总结。</p>\n<table>\n<thead>\n<tr>\n<th>具体设计模式</th>\n<th>解决的问题</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单例模式</td>\n<td>保证唯一性</td>\n</tr>\n<tr>\n<td>策略模式</td>\n<td>多种策略方案实现结果</td>\n</tr>\n<tr>\n<td>代理模式</td>\n<td>对目标对象做前置处理（一般只有一层代理包装），并执行</td>\n</tr>\n<tr>\n<td>迭代器模式</td>\n<td>迭代执行与处理分离</td>\n</tr>\n<tr>\n<td>观察者模式（发布订阅模式）</td>\n<td>解耦发布者与订阅者之间的关系</td>\n</tr>\n<tr>\n<td>命令模式</td>\n<td>记录回溯哦操作，包装操作行为</td>\n</tr>\n<tr>\n<td>组合模式</td>\n<td>合理组织树形结构</td>\n</tr>\n<tr>\n<td>模版方法模式</td>\n<td>定义操作的流程，实现交由各个子类去实现</td>\n</tr>\n<tr>\n<td>享元模式</td>\n<td>明确内外变化，把静态部分单独抽成对象，共享于依赖的多个对象</td>\n</tr>\n<tr>\n<td>责任链模式</td>\n<td>根据各自的职责，链式处理</td>\n</tr>\n<tr>\n<td>中介者模式</td>\n<td>解耦多个对象之间的关系，由中间人处理</td>\n</tr>\n<tr>\n<td>适配器模式</td>\n<td>保持接口原则不变，对新进来的接口进行适配包装掉用</td>\n</tr>\n<tr>\n<td>状态模式</td>\n<td>状态流转，维护状态机</td>\n</tr>\n<tr>\n<td>工厂模式</td>\n<td>管理对象创建</td>\n</tr>\n<tr>\n<td>外观模式</td>\n<td>收口对外暴露的接口</td>\n</tr>\n<tr>\n<td>装饰器模式</td>\n<td>类似代理，但是可以多重包装目标对象，并不执行具体逻辑，仅仅包装</td>\n</tr>\n<tr>\n<td>备案录模式</td>\n<td>缓存数据，历史可回溯</td>\n</tr>\n<tr>\n<td>访问者模式</td>\n<td>允许外部权限访问内部数据</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"6eea4caa\"></a></p>\n<h4>设计模式中相似模式的一些思考</h4>\n<p><a name=\"f863b78c\"></a></p>\n<h5>中介者模式和观察者模式</h5>\n<p><br />中介者解决的问题是将多个角色进行解耦，过程中会把所有角色交互都收敛到中介角色中，使得各个角色只需要跟中介者通讯。而对于观察者模式，日常中用的比较多的就是发布订阅模式，主要是将订阅者将事件注册到发布者上，一旦发布者发布信息就可以通知到所有的订阅者上，并没有存在中间人去解耦发布者跟订阅者之间的关系。<br /></p>\n<p><a name=\"96ec9a47\"></a></p>\n<h5>代理模式和装饰器模式</h5>\n<p><br />代理模式跟装饰器模式都是对目标对象进行包装，但是有比较本质的区别。代理模式一般调用引起目标角色的调用，而装饰器模式仅仅是对目标角色进行包装返回而不会直接触发目标调用。另外代理往往是对目标角色包装一层，而对于装饰器可以不断的嵌套目标角色返回包装后的目标角色。<br /></p>\n<p><a name=\"ad2018de\"></a></p>\n<h5>状态模式和策略模式</h5>\n<p><br />状态模式和策略模式都封装了一系列算法或者行为，类图看上去很相似，但是意图不同。策略模式的各种策略是相互独立平等的，没有内部联系。而对于状态模式往往维护一个状态机，各个状态之间存在依赖关系。<br /></p>\n<p><a name=\"32c203bc\"></a></p>\n<h3>重构技巧</h3>\n<p><br />另外过程中也总结了日常写代码中，要注意的一些点以及如何重构自己写得不太好的代码。<br /></p>\n<p><a name=\"393182e2\"></a></p>\n<h4>提炼函数</h4>\n<p><br />如果在函数中有一段代码可以被独立出来，那我们最好把这些代码放进另外一个独立的函数<br />中。这样做的好处：避免出现超大函数，独立出来的函数有助于代码复用/覆写/逻辑清晰<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//bad case\nvar getUserInfo = function(){\n  ajax( &#39;http:// xxx.com/userInfo&#39;, function( data ){\n    console.log( &#39;userId: &#39; + data.userId );\n    console.log( &#39;userName: &#39; + data.userName );\n    console.log( &#39;nickName: &#39; + data.nickName );\n  });\n};</code></pre></div>\n<p><br />改成：<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//good case\nvar getUserInfo = function(){\n  ajax( &#39;http:// xxx.com/userInfo&#39;, function( data ){\n  \tprintDetails( data );\n  });\n};\nvar printDetails = function( data ){\n  console.log( &#39;userId: &#39; + data.userId );\n  console.log( &#39;userName: &#39; + data.userName );\n  console.log( &#39;nickName: &#39; + data.nickName );\n};</code></pre></div>\n<p><a name=\"02b74ce9\"></a></p>\n<h4>合并重复条件片段</h4>\n<p><br />如果一个函数体内有一些条件分支语句，而这些条件分支语句内部散布了一些重复的代码，<br />那么就有必要进行合并去重工作。<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//bad case\nvar paging = function( currPage ){\n  if ( currPage &lt;= 0 ){\n    currPage = 0;\n    jump( currPage ); // 跳转\n  }else if ( currPage &gt;= totalPage ){\n    currPage = totalPage;\n    jump( currPage ); // 跳转\n  }else{\n    jump( currPage ); // 跳转\n  }\n};</code></pre></div>\n<p><br />改成<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//good case\nvar paging = function( currPage ){\n  if ( currPage &lt;= 0 ){\n  \tcurrPage = 0;\n  }else if ( currPage &gt;= totalPage ){\n  \tcurrPage = totalPage;\n  }\n  jump( currPage ); // 把jump 函数独立出来\n};</code></pre></div>\n<p><a name=\"3fa844d8\"></a></p>\n<h4>把条件分支语句提炼出函数</h4>\n<p><br />复杂的条件分支语句是导致程序难以阅读和理解的重要原因，而且容易导致<br />一个庞大的函数,把逻辑判断代码提炼成一个单独的函数，既能更准确地表达代码的意思，<br />函数名本身又能起到注释的作用。<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//bad case\nvar getPrice = function( price ){\n\tvar date = new Date();\n\tif ( date.getMonth() &gt;= 6 &amp;&amp; date.getMonth() &lt;= 9 ){ // 夏天\n  return price * 0.8;\n\t}\t\n\treturn price;\n};</code></pre></div>\n<p><br />改成:<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//good case\nvar isSummer = function(){\n    var date = new Date();\n    return date.getMonth() &gt;= 6 &amp;&amp; date.getMonth() &lt;= 9;\n};\nvar getPrice = function( price ){\n  if ( isSummer() ){ // 夏天\n  \treturn price * 0.8;\n  }\n  return price;\n};</code></pre></div>\n<p><a name=\"ab32cd13\"></a></p>\n<h4>合理使用循环</h4>\n<p><br />在函数体内，如果有些代码实际上负责的是一些重复性的工作，那么合理利用循环不仅可以<br />完成同样的功能，还可以使代码量更少。<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//bad case\nvar createXHR = function(){\n  var xhr;\n  try{\n    xhr = new ActiveXObject( &#39;MSXML2.XMLHttp.6.0&#39; );\n  }catch(e){\n    try{\n      xhr = new ActiveXObject( &#39;MSXML2.XMLHttp.3.0&#39; );\n    }catch(e){\n      xhr = new ActiveXObject( &#39;MSXML2.XMLHttp&#39; );\n    }\n  }\n  return xhr;\n};\nvar xhr = createXHR();</code></pre></div>\n<p><br />改成：<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//good case\nvar createXHR = function(){\nvar versions= [ &#39;MSXML2.XMLHttp.6.0ddd&#39;, &#39;MSXML2.XMLHttp.3.0&#39;, &#39;MSXML2.XMLHttp&#39; ];\nfor ( var i = 0, version; version = versions[ i++ ]; ){\n  try{\n   return new ActiveXObject( version );\n  }catch(e){\n  }\n }\n};</code></pre></div>\n<p><a name=\"8c224180\"></a></p>\n<h4>提前让函数退出代替嵌套条件分支，条件退出前置</h4>\n<p><br />挑选一些条件分支，在进入这些条件分支之后，就立即让这个函数退出。避免过于复杂的嵌套条件分支语句。<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//bad case\nvar del = function( obj ){\n  var ret;\n  if ( !obj.isReadOnly ){ // 不为只读的才能被删除\n      if ( obj.isFolder ){ // 如果是文件夹\n          ret = deleteFolder( obj );\n      }else if ( obj.isFile ){ // 如果是文件\n          ret = deleteFile( obj );\n      }\n  }\n  return ret;\n};</code></pre></div>\n<p><br />改成：<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//good case\nvar del = function( obj ){\n  if ( obj.isReadOnly ){ // 反转if 表达式\n  \treturn;\n  }\n  if ( obj.isFolder ){\n  \treturn deleteFolder( obj );\n  }\n  if ( obj.isFile ){\n  \treturn deleteFile( obj );\n  }\n};</code></pre></div>\n<p><a name=\"76c2c818\"></a></p>\n<h4>传递对象参数代替过长的参数列表</h4>\n<p><br />有时候一个函数有可能接收多个参数，而参数的数量越多，函数就越难理解和使用。我们可以把参数都放入一个对象内,需要的数据可以自行从该对象里获取,不用再关心参数的数量和顺序.<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//bad case\nvar setUserInfo = function( id, name, address, sex, mobile, qq ){\nconsole.log( &#39;id= &#39; + id );\n  console.log( &#39;name= &#39; +name );\n  console.log( &#39;address= &#39; + address );\n  console.log( &#39;sex= &#39; + sex );\n  console.log( &#39;mobile= &#39; + mobile );\n  console.log( &#39;qq= &#39; + qq );\n};\nsetUserInfo( 1314, &#39;sven&#39;, &#39;shenzhen&#39;, &#39;male&#39;, &#39;137********&#39;, 377876679 );</code></pre></div>\n<p><br />改成：<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//good case\nvar setUserInfo = function( obj ){\n  console.log( &#39;id= &#39; + obj.id );\n  console.log( &#39;name= &#39; + obj.name );\n  console.log( &#39;address= &#39; + obj.address );\n  console.log( &#39;sex= &#39; + obj.sex );\n  console.log( &#39;mobile= &#39; + obj.mobile );\n  console.log( &#39;qq= &#39; + obj.qq );\n};\nsetUserInfo({\n  id: 1314,\n  name: &#39;sven&#39;,\n  address: &#39;shenzhen&#39;,\n  sex: &#39;male&#39;,\n  mobile: &#39;137********&#39;,\n  qq: 377876679\n});</code></pre></div>\n<p><a name=\"8e5579f3\"></a></p>\n<h4>尽量减少参数数量</h4>\n<p><br />如果调用一个函数时需要传入多个参数，那这个函数是让人望而生畏的，我们必须搞清楚这<br />些参数代表的含义，必须小心翼翼地把它们按照顺序传入该函数。实际开发中，向函数传递参数不可避免，但我们应该尽量减少函数接收的参数数量。<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//bad case\nvar draw = function( width, height, square ){};</code></pre></div>\n<p><br />改成：<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//good case\nvar draw = function( width, height ){\n  var square = width * height;\n};</code></pre></div>\n<p><a name=\"d6c5716c\"></a></p>\n<h4>少用三目运算符</h4>\n<p><br />有一些程序员喜欢大规模地使用三目运算符，来代替传统的if、else。但是有些时候要保证代码可读性和可维护性，尽量少用三目运算符。<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//bad case\nvar global = typeof window !== &quot;undefined&quot; ? window : this;</code></pre></div>\n<p><br />改成：<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//good case\nvar global = null;\nif (typeof window !== &quot;undefined&quot;) {\n\tglobal = window;\nelse{\n\tglobal = this;\n}</code></pre></div>\n<p><a name=\"81007cda\"></a></p>\n<h4>合理使用链式调用</h4>\n<p><br />链式调用的方式并不会造成太多阅读上的困难，也能省下一些字符和中间变量。链式调用带来的坏处就是在调试的时候非常不方便，如果我们知道一条链中有错误出现，必须得先把这条链拆开才能加上一些调试log 或者增加断点，这样才能定位错误出现的地方。如果该链条的结构相对稳定，后期不易发生修改，那么使用链式调用无可厚非。但如果该链条很容易发生变化，导致调试和维护困难，那么还是建议使用普通调用的形式。<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//bad case\nvar User = {\n  id: null,\n  name: null,\n  setId: function( id ){\n    this.id = id;\n    return this;\n  },\n  setName: function( name ){\n    this.name = name;\n    return this;\n  }\n};\nconsole.log( User.setId( 1314 ).setName( &#39;sven&#39; ) );</code></pre></div>\n<p><br />改成：<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//good case\nvar user = new User();\nuser.setId( 1314 );\nuser.setName( &#39;sven&#39; );</code></pre></div>\n<p><a name=\"cc286419\"></a></p>\n<h4>分解大型类</h4>\n<p><br />如果一个类的职责太大了，实际上它的职责完全有必要拆成多个的类存在，面向对象设计鼓励将行为分布在合理数量的更小对象。<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//bad case\nvar Spirit = function( name ){\n  this.name = name;\n};\nSpirit.prototype.attack = function( type ){ // 攻击\n  if ( type === &#39;waveBoxing&#39; ){\n   console.log( this.name + &#39;: 使用波动拳&#39; );\n  }else if( type === &#39;whirlKick&#39; ){\n    console.log( this.name + &#39;: 使用旋风腿&#39; );\n  }\n};\nvar spirit = new Spirit( &#39;RYU&#39; );\nspirit.attack( &#39;waveBoxing&#39; ); // 输出：RYU: 使用波动拳\nspirit.attack( &#39;whirlKick&#39; ); // 输出：RYU: 使用旋风腿</code></pre></div>\n<p><br />改为：<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//good case\nvar Attack = function( spirit ){\n  this.spirit = spirit;\n};\nAttack.prototype.start = function( type ){\n  return this.list[ type ].call( this );\n};\nAttack.prototype.list = {\n  waveBoxing: function(){\n    console.log( this.spirit.name + &#39;: 使用波动拳&#39; );\n  },\n  whirlKick: function(){\n    console.log( this.spirit.name + &#39;: 使用旋风腿&#39; );\n  }\n};\nvar Spirit = function( name ){\n  this.name = name;\n  this.attackObj = new Attack( this );\n};\nSpirit.prototype.attack = function( type ){ // 攻击\n  this.attackObj.start( type );\n};\nvar spirit = new Spirit( &#39;RYU&#39; );\nspirit.attack( &#39;waveBoxing&#39; ); // 输出：RYU: 使用波动拳\nspirit.attack( &#39;whirlKick&#39; ); // 输出：RYU: 使用旋风腿</code></pre></div>\n<p><a name=\"f50f770d\"></a></p>\n<h4>用return 退出多重循环</h4>\n<p><br />假设在函数体内有一个两重循环语句，我们需要在内层循环中判断，当达到某个临界条件时<br />退出外层的循环。我们大多数时候会引入一个控制标记变量,但这做法无疑都让人头晕目眩，更简单的做法是在需要中止循环的时候直接退出整个方法。<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//bad case\nvar func = function(){\nvar flag = false;\nfor ( var i = 0; i &lt; 10; i++ ){\n  for ( var j = 0; j &lt; 10; j++ ){\n      if ( i * j &gt;30 ){\n        flag = true;\n        break;\n      }\n    }\n    if ( flag === true ){\n      break;\n    }\n  }\n};</code></pre></div>\n<p><br />改成：<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//good case\nvar func = function(){\n  for ( var i = 0; i &lt; 10; i++ ){\n    for ( var j = 0; j &lt; 10; j++ ){\n      if ( i * j &gt;30 ){\n        return;\n      }\n    }\n  }\n};</code></pre></div>\n<p><a name=\"25f9c7fa\"></a></p>\n<h3>总结</h3>\n<p><br />很早些年其实看了不少次《设计模式》系列的书籍，但是以前项目经验太少，也因为代码写的少，对代码设计这块其实领悟得不够多。如今做了一段时间后回顾这块内容的时候，对自己在代码设计以及重构方面还是有了很大的帮助。后续还是要怀抱着对代码的敬畏之心，好好写好自己的代码。<br />背景<br />为什么突然想写前端编码中的设计模式呢？国庆期间自己思考了下设计模式在日常开发中的用法以及代码重构的技巧。于是乎整理了下这篇文章跟大家分享下前端这块的设计模式以及一些代码重构的思路。设计模式的玄学还是得在很多个项目中去实战总结思考才能领悟到。<br />设计模式<br />设计模式是大家日常开发中面向对象比较长谈的代码结构的设计方式，主要规范了我们平时开发过程中的代码设计原则，这里列举下比较重要的几个原则：<br />• 开闭原则(OCP)：对于组件功能的扩展是开放的,对于原有代码的修改是封闭的。<br />• 单一职责原则(SRP)：一个类只负责一项职责。<br />• 里氏替换原则(LSP)：子类可以扩展父类的功能，但不能改变父类原有的功能。<br />• 依赖倒置原则(DIP)：面向接口编程，不针对实现编程。<br />• 接口隔离原则(ISP)：每一个接口都应该承担相对独立的角色。<br />• 最少知识原则(LoD)：降低系统耦合，使类与类之间的结构松散。<br />正常看了这么多原则，没写过大量业务项目代码的话，真的是比较难理解这些思想，当然作为从Java转到Javascript这块坑的我最大的感受是从约束很严格的语言转到一门非常灵活的语言上。但是设计模式的思想还是通用的，依旧能够借助其思想去解决业务设计上的一些问题。<br />常见的设计模式<br />一般常见的设计模式有如下24中类：<br />创建型<br />结构型<br />行为型<br />单例模式<br />代理模式<br />迭代器模式<br />抽象工厂模式<br />组合模式<br />模版方法模式<br />简单工厂模式<br />适配器模式<br />访问者模式<br />工厂方法模式<br />桥接模式<br />解释器模式<br />构建器模式<br />装饰器模式<br />责任链模式<br />原型模式<br />外观模式<br />备案录模式<br />享元模式<br />中介者模式<br />状态模式<br />观察者模式<br />命令模式<br />策略模式<br />下面我会用ES6来编写这几种设计模式：<br />创建型模式<br />单例模式模式<br />class Singleton {<br />static getInstance() {<br />if (!Singleton.instance) {<br />Singleton.instance = new Singleton();<br />}<br />return Singleton.instance;<br />}<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">method(){\n    console.log(&quot;hello world!&quot;);\n}</code></pre></div>\n<p><br />}<br />let obj = Singleton.getInstance();<br />简单工厂模式<br />class Car {<br />constructor(options) {<br />options = options || \"\";<br />this.doors = options.doors || 4;<br />this.state = options.state || “brand new”;<br />this.color = options.color || “silver”;<br />}<br />}<br />class CarFactory {<br />createCar(options) {<br />return new Car(options);<br />}<br />}<br />const carFactory = new CarFactory();<br />const car = carFactory.createCar({<br />objType: “car”,<br />color: “yellow”,<br />doors: 4<br />});<br />工厂方法模式<br />class Car {<br />constructor(options) {<br />this.doors = options.doors || 4;<br />this.state = options.state || “brand new”;<br />this.color = options.color || “silver”;<br />}<br />}<br />class BigCar extends Car {<br />constructor(options) {<br />super(options);<br />}<br />}<br />class SmallCar extends Car {<br />constructor(options) {<br />super(options);<br />}<br />}<br />class ObjectFactory {<br />constructor(Class) {<br />this.objClass = Class;<br />}<br />createObj(options) {<br />return new this.objClass(options);<br />}<br />}<br />class BigCarFactory extends ObjectFactory{<br />constructor() {<br />super(BigCar);<br />}<br />}<br />class SmallCarFactory extends ObjectFactory{<br />constructor() {<br />super(SmallCar);<br />}<br />}<br />//usage<br />const bigCarFactory = new BigCarFactory();<br />const bigCarObj = bigCarFactory.createObj({<br />color: “yellow”,<br />doors: 6<br />});<br />const smallCarFactory = new SmallCarFactory();<br />const smallCarObj = smallCarFactory.createObj({<br />color: “blue”,<br />doors: 4<br />});<br />抽象工厂模式<br />class Car {}<br />class BigCar extends Car{}<br />class SmallCar extends Car{}<br />class Bike {}<br />class BigBike extends Bike{}<br />class SmallBike extends Bike{}<br />class Factory {<br />getCar(){<br />throw new Error(‘子类实现’)<br />}<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> getBike(){\n    throw new Error(&#39;子类实现&#39;)\n}</code></pre></div>\n<p><br />}<br />class BigFactory extends Factory {<br />getCar(){<br />return new BigCar();<br />}<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">getBike(){\n    return new BigBike();\n}</code></pre></div>\n<p><br />}<br />class SmallFactory extends Factory {<br />getCar(){<br />return new SmallCar();<br />}<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">getBike(){\n    return new SmallBike();\n}</code></pre></div>\n<p><br />}<br />//usage<br />const bigFactory = new BigFactory();<br />const bigcar = bigFactory.getCar();<br />const bigbike = bigFactory.getBike();<br />const smallFactory = new SmallFactory();<br />const smallcar = smallFactory.getCar();<br />const smallbike = smallFactory.getBike();<br />构建器模式<br />class CarBuilder {<br />constructor() {<br />this.engine = ”;<br />this.tyre = ”;<br />this.logo = ”;<br />Object.keys(this).forEach(key => {<br />//把每个属性名第一个字母大写并拼入set,构成setXXX<br />const setFuncName =  <code class=\"language-text\">set${key.substring(0,1).toUpperCase()}${key.substring(1)}</code>;<br />this[setFuncName] = value => {<br />this[key] = value;<br />return this;<br />}<br />})<br />}<br />\n<br />//调用建造者<br />build() {<br />//取出所有属性非方法<br />const keysNoFunc = Object.keys(this).filter(key => typeof this[key] !== ‘function’);<br />return keysNoWithers.reduce((returnValue, key) => {<br />return {<br />…returnValue,<br />[key]: this[key]<br />}<br />}, {});<br />}<br />}<br />const car = new CarBuilder()<br />.setEngine(“牛逼哄哄的引擎”)<br />.setTyre(4)<br />.setLogo(‘蓝博基泥’)<br />.build();<br />console.log(car)<br />原型模式<br />class Person{<br />constructor(name) {<br />this.name = name;<br />}<br />\n<br />clone(){<br />var that = Object.create(this.prototype);<br />var other = this.apply(that, arguments);<br />return (typeof other === ‘object’ &#x26;&#x26; other) ? other : that;<br />}<br />}<br />let tom = new Person(‘tom’);<br />let jerry = tom.clone(‘jerry’);<br />结构型模式<br />代理模式<br />class Master {<br />doSomething(args) {<br />console.log(‘Master do something…’ + args.name);<br />}<br />}<br />class Proxy extends Master {<br />constructor() {<br />super();<br />}<br />doSomething(args) {<br />//do some other thing<br />console.log(‘proxy do something’)<br />args.name = ‘hello’;<br />//master do something<br />super.doSomething(args)<br />}<br />}<br />const proxy = new Proxy();<br />proxy.doSomething();<br />组合模式<br />class Component {<br />constructor() {}<br />operation (){}<br />add (Component){}<br />remove (Component){}<br />getChild (key){}<br />}<br />class Leaf extends Component {<br />constructor(name) {<br />super()<br />this.name = name<br />}<br />operation (){}<br />}<br />class Composite extends Component {<br />constructor(name) {<br />super()<br />this.name = name<br />this.children = []<br />facade.log(‘Composite created’)<br />}<br />operation (){<br />for(var i in this.children)<br />this.children[i].Operation()<br />}<br />add (Component){<br />this.children.push(Component)<br />}<br />remove (Component){<br />for(var i in this.children)<br />if(this.children[i] === Component)<br />this.children.splice(i, 1)<br />}<br />getChild (key){<br />return this.children[key]<br />}<br />}<br />const composite1 = new Composite(‘C1’)<br />composite1.Add(new Leaf(‘L1’))<br />composite1.Add(new Leaf(‘L2’))<br />const composite2 = new Composite(‘C2’)<br />composite2.Add(composite1)<br />composite1.GetChild(1).Operation()<br />composite2.Operation()<br />适配器模式<br />class MediaPlayerInterface{<br />play(audioType,fileName){<br />throw “播放方法,由子类实现”<br />}<br />}<br />class VlcPlayer{<br />playVlc(fileName){<br />console.log(<code class=\"language-text\">我是Vlc播放器文件名称是${fileName}</code>)<br />}<br />playMp4(fileName){}<br />}<br />class Mp4Player{<br />playMp4(fileName){<br />console.log(<code class=\"language-text\">我是Mp4播放器文件名称是${fileName}</code>)<br />}<br />}<br />class MediaPlayer extends MediaPlayerInterface{<br />play(audioType,fileName){<br />if(audioType==“vlc”)new VlcPlayer().playVlc(fileName);<br />if(audioType==“mp4”)new Mp4Player().playMp4(fileName);<br />}<br />}<br />class Mp3Player{<br />playMp3(fileName){<br />console.log(<code class=\"language-text\">我是Mp3播放器文件名称是${fileName}</code>)<br />}<br />}<br />class AudioPlayerAdapter extends MediaPlayerInterface{<br />constructor(mediaPlayer) {<br />super()<br />this.mediaPlayer = mediaPlayer;<br />}<br />play(audioType,fileName){<br />if(audioType===“mp3”){<br />new Mp3Player().playMp3(fileName);<br />}else{<br />this.mediaPlayer.play(audioType,fileName);<br />}<br />}<br />}<br />const mediaPlayer = new MediaPlayer()<br />audioPlayer.play(“mp4”, “alone.mp4”);<br />audioPlayer.play(“vlc”, “far far away.vlc”);<br />//某天要新增mp3播放器，那么只需要套一层适配器<br />var audioPlayer = new AudioPlayerAdapter(mediaPlayer);<br />audioPlayer.play(“mp3”, “beyond the horizon.mp3”);<br />外观模式<br />class Facade {<br /><em>getUserName() {<br />console.log(“current user:” + this.name);<br />}<br /></em>setUserName(name) {<br />this.name = name;<br />}<br /><em>run() {<br />console.log(“running”);<br />}<br /></em>jump() {<br />console.log(“jumping”);<br />}<br />facade(args) {<br />let {run,name,jump} = args;<br />this.<em>setUserName(name);<br />this.</em>getUserName();<br />if (run) {<br />this.<em>run();<br />}<br />if (jump) {<br />this.</em>jump();<br />}<br />}<br />}<br />let facadeObj = new Facade();<br />facadeObj.facade({ run: true, jump: true ,name:‘uk’ });<br />装饰器模式<br />class MacBook {<br />cost() {<br />return 997;<br />}<br />}<br />function Memory(macbook) {<br />let v = macbook.cost();<br />macbook.cost = function() {<br />return v + 75;<br />};<br />return macbook;<br />}<br />function Engraving(macbook) {<br />let v = macbook.cost();<br />macbook.cost = function() {<br />return v + 200;<br />};<br />return macbook;<br />}<br />function Insurance(macbook) {<br />let v = macbook.cost();<br />macbook.cost = function() {<br />return v + 250;<br />};<br />return macbook;<br />}<br />let mb = new MacBook();<br />mb = Memory(mb);//加内存<br />mb = Engraving(mb);//加刻字<br />mb = Insurance(mb);//加保险<br />console.log(mb.cost());// 总计: 1522<br />桥接模式<br />class DrawAPI {<br />drawCircle(radius,x, y){<br />throw “抽象方法”<br />}<br />}<br />class RedCircle extends DrawAPI {<br />drawCircle( radius,  x,  y) {<br />console.log(“Drawing Circle[ color: red, radius: ” + radius + ”, x: ” + x + ”, ” + y + ”]”);<br />}<br />}<br />class GreenCircle extends DrawAPI {<br />drawCircle( radius,  x,  y) {<br />console.log(“Drawing Circle[ color: green, radius: ” + radius + ”, x: ” + x + ”, ” + y + ”]”);<br />}<br />}<br />\n<br />class Shape {<br />constructor(drawAPI) {<br />this.drawAPI = drawAPI;<br />}<br />draw(){<br />this.drawAPI.drawCircle(this.x,this.y,this.radius)<br />}<br />}<br />class Circle extends Shape{<br />constructor(x, y, radius, drawAPI){<br />super(drawAPI);<br />this.x = x;<br />this.y = y;<br />this.radius = radius;<br />}<br />}<br />//将实际Circle渲染的实现与Circle定义进行分离<br />const redCircle = new Circle(100,1000, 10, new RedCircle());//画红圆<br />const greenCircle = new Circle(100,100, 10, new GreenCircle());//画绿圆<br />redCircle.draw();<br />greenCircle.draw();<br />享元模式<br />class Flyweight {<br />constructor(make, model, processor){<br />this.make = make;<br />this.model = model;<br />this.processor = processor;<br />}<br />};<br />class FlyWeightFactory {<br />constructor(){<br />flyweights = {};<br />}<br />get(make, model, processor) {<br />if (!flyweights[make + model]) {<br />flyweights[make + model] = new Flyweight(make, model, processor);<br />}<br />return flyweights[make + model];<br />}<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">getCount() {\n  let count = 0;\n  for (let f in flyweights) count++;\n  return count;\n}</code></pre></div>\n<p><br />};<br />class Computer {<br />constructor (make, model, processor, memory, tag){<br />this.flyweight = FlyWeightFactory.get(make, model, processor);<br />this.memory = memory;<br />this.tag = tag;<br />}<br />}<br />class ComputerCollection {<br />constructor(){<br />var computers = {};<br />var count = 0;<br />}<br />add(make, model, processor, memory, tag){<br />computers[tag] = new Computer(make, model, processor, memory, tag);<br />count++;<br />}<br />get(tag){<br />return computers[tag];<br />}<br />getCount() {<br />return count;<br />}<br />}<br />var computers = new ComputerCollection();<br />computers.add(“Dell”, “Studio XPS”, “Intel”, “5G”, “Y755P”);<br />computers.add(“Dell”, “Studio XPS”, “Intel”, “6G”, “X997T”);<br />computers.add(“Dell”, “Studio XPS”, “Intel”, “2G”, “U8U80”);<br />computers.add(“Dell”, “Studio XPS”, “Intel”, “2G”, “NT777”);<br />computers.add(“Dell”, “Studio XPS”, “Intel”, “2G”, “0J88A”);<br />computers.add(“HP”, “Envy”, “Intel”, “4G”, “CNU883701”);<br />computers.add(“HP”, “Envy”, “Intel”, “2G”, “TXU003283”);<br />console.log(“Computers: ” + computers.getCount());<br />//count = 7;<br />console.log(“Flyweights: ” + FlyWeightFactory.getCount());<br />//count = 2; 这里把品牌/型号/处理器都抽成共享单元了<br />//[(“Dell”, “Studio XPS”, “Intel”),(“HP”, “Envy”, “Intel”)]<br />行为型模式<br />策略模式<br />class Checker {<br />constructor(check, instructions) {<br />this.check = check;<br />this.instructions = instructions;<br />}<br />}<br />class Validator {<br />constructor(config) {<br />this.config = config,<br />this.messages = {};<br />}<br />validate(data) {<br />for (let key in data) {<br />let value = data[key];<br />let type = this.config[key];<br />if (!type) {<br />continue;<br />}<br />let checker = Validator[type];<br />if (!checker) {<br />throw new Error(<code class=\"language-text\">No handler to validate type ${type}</code>);<br />}<br />let result = checker.check(value);<br />if (!result) {<br />this.messages.push(checker.instructions + <code class=\"language-text\">**${value}**</code>);<br />}<br />}<br />}<br />hasError() {<br />return this.messages.length !== 0;<br />}<br />}<br />let data = {<br />first<em>name:‘Super’,<br />last</em>name:‘Man’,<br />age:‘unknown’,<br />username:‘uk’<br />};<br />let config = {<br />first_name:‘isNonEmpty’,<br />age:‘isNumber’,<br />username:‘isAlphaNum’<br />};<br />Validator.isNumber = new Checker((val) => !isNaN(val), ‘the value can only be a valid number’);<br />Validator.isNonEmpty = new Checker((val) => val !== \"\", ‘the value can not be empty’);<br />Validator.isAlphaNum = new Checker((val) => !/^a-z0-9/i.test(val), ‘the value can not have special symbols’);<br />let validator = new Validator(config);<br />validator.validate(data);<br />console.log(validator.hasError());// true<br />console.log(validator.messages.join(‘\\n’)); // the value can only be a valid number <strong>unknown</strong><br />迭代器模式<br />class IteratorArray {<br />constructor(array) {<br />super();<br />this.data = array;<br />}<br />\n<br /><a href=\"\">Symbol.iterator</a>{<br />let index = 0;<br />return {<br />next: () => {<br />if (index &#x3C; this.data.length) {<br />return {<br />value: this.data[index++],<br />done: false<br />};<br />}<br />return {<br />value: undefined,<br />done: true<br />};<br />},<br />hasNext: () => index &#x3C; this.data.length,<br />rewind: () => index = 0,<br />current: () => {<br />index -= 1;<br />if (index &#x3C; this.data.length) {<br />return {<br />value: this.data[index++],<br />done: false<br />};<br />}<br />return {<br />value: undefined,<br />done: true};<br />}<br />}<br />}<br />}<br />const iteratorArray = new IteratorArray([1,2,3,4,5])<br />const iter = iteratorArray<a href=\"\">Symbol.iterator</a>;<br />console.log(iter.next()); // { value: 1, done: false }<br />console.log(iter.next()); // { value: 2, done: false }<br />console.log(iter.current());// { value: 2, done: false }<br />console.log(iter.hasNext());// true<br />console.log(iter.rewind()); // rewind!<br />console.log(iter.next()); // { value: 1, done: false }<br />// for…of<br />for (let value of iteratorArray) {<br />console.log(value);<br />}<br />观察者模式<br />class Pubsub {<br />constructor(){<br />this.topics = {};<br />}<br />publish(name, args) {<br />if (!this.topics[name]) {<br />return false;<br />}<br />for(let key in this.topics[name]){<br />const callback = this.topics[name];<br />callback(args);<br />}<br />}<br />subscribe(name, callback) {<br />if (!this.topics[name]) {<br />this.topics[name] = [];<br />}<br />this.topics[name].push(callback);<br />}<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">unsubscribe(name,callback) {\n     if (!this.topics[name]) {\n        return false;\n     }\n     this.topics[name].remove(callback);\n}</code></pre></div>\n<p><br />}<br />let obj = {<br />callback:(message)=>{<br />console.log(message);<br />}<br />}<br />let pubsub = new Pubsub();<br />pubsub.subscribe(“subscribe”, obj.callback);<br />pubsub.publish(“subscribe”, “hello all!”);<br />//obj console hello all!<br />命令模式<br />class Command {<br />constructor(do,undo){<br />this.do = do;<br />this.undo = undo;<br />}<br />execute(){<br />this.do();<br />}<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">undo(){\n  this.undo();\n}</code></pre></div>\n<p><br />}<br />class Commands {<br />constructor(){<br />this.commandsList = [];<br />}<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">add( command ){\nthis.commandsList.push( command );\n}\n\nexecute(){\n  for (const command of this.commandsList){\n    command.execute();\n  }\n}\n\nundo(){\n  for (const command of this.commandsList){\n    command.undo();\n  }\n}</code></pre></div>\n<p><br />}<br />let sleepCommond = new Command(()=>{<br />console.log(‘sleep’)<br />},()=>{<br />console.log(‘wake up’);<br />});<br />let runCommond = new Command(()=>{<br />console.log(‘run’)<br />},()=>{<br />console.log(‘back’);<br />});<br />const commands = Commands();<br />commands.add( sleepCommond );<br />commands.add( runCommond );<br />commands.execute();<br />commands.undo();<br />模版方法模式<br />class Beverage {<br />boilWater(){<br />console.log( “煮一壶水” );<br />}<br />brew(){<br />throw new Error(‘具体由子类实现’);<br />}<br />pourInCup(){<br />throw new Error(‘具体由子类实现’);<br />}<br />addCondiments(){<br />throw new Error(‘具体由子类实现’);<br />}<br />go(){<br />boilWater();<br />brew();<br />pourInCup();<br />addCondiments();<br />}<br />}<br />class Coffee extends Beverage{<br />brew() {<br />console.log( “用沸水冲泡咖啡” );<br />}<br />pourInCup(){<br />console.log( “把咖啡倒进杯子” );<br />}<br />addCondiments() {<br />console.log( “加糖和牛奶” );<br />}<br />}<br />class Tea extends Beverage{<br />brew() {<br />console.log( “用沸水浸泡茶叶” );<br />}<br />pourInCup(){<br />console.log( “把茶倒进杯子” );<br />}<br />addCondiments() {<br />console.log( “加柠檬” );<br />}<br />}<br />const coffee = new Coffee();<br />const tea = new Tea();<br />coffee.go();<br />tea.go();<br />责任链模式<br />let order500 = function( orderType, pay, stock ){<br />if ( orderType === 1 &#x26;&#x26; pay === true ){<br />console.log( ‘500 元定金预购，得到100 优惠券’ );<br />}else{<br />return ‘next’; // 我不知道下一个节点是谁，反正把请求往后面传递<br />}<br />};<br />let order200 = function( orderType, pay, stock ){<br />if ( orderType === 2 &#x26;&#x26; pay === true ){<br />console.log( ‘200 元定金预购，得到50 优惠券’ );<br />} else {<br />return ‘next’; // 我不知道下一个节点是谁，反正把请求往后面传递<br />}<br />};<br />let orderNormal = function( orderType, pay, stock ){<br />if ( stock > 0 ){<br />console.log( ‘普通购买，无优惠券’ );<br />}else{<br />console.log( ‘手机库存不足’ );<br />}<br />};<br />class Chain {<br />constructor(){<br />this.fn = fn;<br />this.nextFunc = null;<br />}<br />setNextFunc( nextFunc ){<br />return this.nextFunc = nextFunc;<br />}<br />run() {<br />var result = this.fn.apply( this, arguments );<br />if ( result === ‘next’ ){<br />return this.nextFunc &#x26;&#x26; this.nextFunc.run.apply( this.nextFunc, arguments);<br />}<br />return result;<br />}<br />}<br />var chainOrder500 = new Chain( order500 );<br />var chainOrder200 = new Chain( order200 );<br />var chainOrderNormal = new Chain( orderNormal );<br />//构造处理链路<br />chainOrder500.setNextFunc( chainOrder200 );<br />chainOrder200.setNextFunc( chainOrderNormal );<br />chainOrder500.run( 1, true, 500 ); // 输出：500 元定金预购，得到100 优惠券<br />chainOrder500.run( 2, true, 500 ); // 输出：200 元定金预购，得到50 优惠券<br />chainOrder500.run( 3, true, 500 ); // 输出：普通购买，无优惠券<br />chainOrder500.run( 1, false, 0 ); // 输出：手机库存不足<br />中介者模式<br />class ChatRoom {<br />constructor () {}<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> showMessage (message) {\n     console.log(new Date(), user.getName(), message)\n }</code></pre></div>\n<p><br />}<br />class User {<br />constructor (name){<br />this.name = name<br />}<br />setName () {<br />this.name = name<br />}<br />getName() {<br />return this.name<br />}<br />setRoom(room){<br />this.room = room;<br />}<br />sendMessage (message) {<br />room.showMessage(this, message)<br />}<br />}<br />//chatRoom将tom跟jack解耦<br />const chatRoom = ChatRoom();<br />const tom = new User(“Tom Zhang”);<br />tom.setRoom(chatRoom);<br />tom.sendMessage(“My name is Tom”);<br />\n<br />const jack = new User(“Jack Chen”);<br />jack.setRoom(chatRoom);<br />jack.sendMessage(“My name is Jack”);<br />状态模式<br />class Context {<br />constructor () {<br />this.state = null<br />}<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">setState(state) {\n    this.state = state\n}\n\ngetState() {\n    return this.state\n}</code></pre></div>\n<p><br />}<br />class State {<br />doAction(context) {<br />throw new Error(‘具体子类去实现状态’)<br />}<br />}<br />class StartState extends State {<br />constructor () {<br />super()<br />this.context = null<br />}<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">doAction(context) {\n    console.log(&#39;this is start state&#39;);\n    context.setState(this)\n}\n\nprintState() {\n     console.log(&#39;start state&#39;)\n}</code></pre></div>\n<p><br />}<br />class StopState extends State {<br />constructor() {<br />super()<br />this.context = null<br />}<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">doAction(context) {\n    console.log(&#39;this is stop state&#39;);\n    context.setState(this)\n}\n\nprintState() {\n     console.log(&#39;stop state&#39;)\n}</code></pre></div>\n<p><br />}<br />class LoadingState extends State {<br />constructor() {<br />super()<br />this.context = null<br />}<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">doAction(context) {\n    console.log(&#39;this is loading state&#39;);\n    context.setState(this)\n}\n\nprintState() {\n     console.log(&#39;loading state&#39;)\n}</code></pre></div>\n<p><br />}<br />const context = new Context()<br />let startState = new StartState()<br />startState.doAction(context)<br />context.getState().toStateStr()<br />\n<br />let stopState = new StopState()<br />stopState.doAction(context)<br />context.getState().toStateStr()<br />\n<br />let loadingState = new LoadingState()<br />loadingState.doAction(context)<br />context.getState().toStateStr()<br />访问者模式<br />class Visitor {<br />visit(target) {<br />console.log(<code class=\"language-text\">正在查${target.name}的水表</code>);<br />}<br />}<br />class User{<br />constructor(name) {<br />this.name = name || \"\";<br />}<br />accept(visitor) {<br />visitor.visit(this);<br />}<br />}<br />let user = new User(‘yaoxian’);<br />var visitor = new Visitor();<br />user.accept( visitor );//正在查yaoxian的水表<br />解释器模式<br />class Context{<br />constructor(input) {<br />this.input = input;<br />this.output = 0;<br />}<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">startsWith(str) {\n    return this.input.substr(0, str.length) === str;\n}</code></pre></div>\n<p><br />}<br />class Expression{<br />constructor(name, one, four, five, nine, multiplier) {<br />this.name = name;<br />this.one = one;<br />this.four = four;<br />this.five = five;<br />this.nine = nine;<br />this.multiplier = multiplier;<br />}<br /></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">interpret(context) {\n    if (context.input.length == 0) {\n        return;\n    }\n    else if (context.startsWith(this.nine)) {\n        context.output += (9 * this.multiplier);\n        context.input = context.input.substr(2);\n    }\n    else if (context.startsWith(this.four)) {\n        context.output += (4 * this.multiplier);\n        context.input = context.input.substr(2);\n    }\n    else if (context.startsWith(this.five)) {\n        context.output += (5 * this.multiplier);\n        context.input = context.input.substr(1);\n    }\n    while (context.startsWith(this.one)) {\n        context.output += (1 * this.multiplier);\n        context.input = context.input.substr(1);\n    }\n}</code></pre></div>\n<p><br />}<br />const roman = “MCMXXVIII”<br />const context = new Context(roman);<br />const tree = [];<br />tree.push(new Expression(“thousand”, “M”, ” ” , ” ”, ” ” , 1000));<br />tree.push(new Expression(“hundred”, “C”, “CD”, “D”, “CM”, 100));<br />tree.push(new Expression(“ten”, “X”, “XL”, “L”, “XC”, 10));<br />tree.push(new Expression(“one”, “I”, “IV”, “V”, “IX”, 1));<br />for (var i = 0, len = tree.length; i &#x3C; len; i++) {<br />tree[i].interpret(context);<br />}<br />alert(roman + ” = ” + context.output);<br />备案录模式<br />class CacheUtil {<br />constructor() {<br />this.cache = {};<br />}<br />\n<br />requestData(url,callback){<br />if (cache[url]){<br />data = cache[url];<br />callback(data);<br />}else{<br />//模拟网络请求<br />setTimeout(()=>{<br />cache[url] = data;<br />callback(data);<br />},3000);<br />}<br />}<br />}<br />let cache = new CacheUtil();<br />cache.requestData(‘www.baidu.com’,(data)=>{console.log(data)});//请求<br />cache.requestData(‘www.baidu.com’,(data)=>{console.log(data)});//从备忘录中获取<br />关于更多详细的设计模式说明可以到《javascript pattern》去查阅。<br />思考总结<br />针对上述的一些设计模式，对其解决问题场景提炼出思考总结。<br />具体设计模式<br />解决的问题<br />单例模式<br />保证唯一性<br />策略模式<br />多种策略方案实现结果<br />代理模式<br />对目标对象做前置处理（一般只有一层代理包装），并执行<br />迭代器模式<br />迭代执行与处理分离<br />观察者模式（发布订阅模式）<br />解耦发布者与订阅者之间的关系<br />命令模式<br />记录回溯哦操作，包装操作行为<br />组合模式<br />合理组织树形结构<br />模版方法模式<br />定义操作的流程，实现交由各个子类去实现<br />享元模式<br />明确内外变化，把静态部分单独抽成对象，共享于依赖的多个对象<br />责任链模式<br />根据各自的职责，链式处理<br />中介者模式<br />解耦多个对象之间的关系，由中间人处理<br />适配器模式<br />保持接口原则不变，对新进来的接口进行适配包装掉用<br />状态模式<br />状态流转，维护状态机<br />工厂模式<br />管理对象创建<br />外观模式<br />收口对外暴露的接口<br />装饰器模式<br />类似代理，但是可以多重包装目标对象，并不执行具体逻辑，仅仅包装<br />备案录模式<br />缓存数据，历史可回溯<br />访问者模式<br />允许外部权限访问内部数据<br />设计模式中相似模式的一些思考<br />中介者模式和观察者模式<br />中介者解决的问题是将多个角色进行解耦，过程中会把所有角色交互都收敛到中介角色中，使得各个角色只需要跟中介者通讯。而对于观察者模式，日常中用的比较多的就是发布订阅模式，主要是将订阅者将事件注册到发布者上，一旦发布者发布信息就可以通知到所有的订阅者上，并没有存在中间人去解耦发布者跟订阅者之间的关系。<br />代理模式和装饰器模式<br />代理模式跟装饰器模式都是对目标对象进行包装，但是有比较本质的区别。代理模式一般调用引起目标角色的调用，而装饰器模式仅仅是对目标角色进行包装返回而不会直接触发目标调用。另外代理往往是对目标角色包装一层，而对于装饰器可以不断的嵌套目标角色返回包装后的目标角色。<br />状态模式和策略模式<br />状态模式和策略模式都封装了一系列算法或者行为，类图看上去很相似，但是意图不同。策略模式的各种策略是相互独立平等的，没有内部联系。而对于状态模式往往维护一个状态机，各个状态之间存在依赖关系。<br />重构技巧<br />另外过程中也总结了日常写代码中，要注意的一些点以及如何重构自己写得不太好的代码。<br />提炼函数<br />如果在函数中有一段代码可以被独立出来，那我们最好把这些代码放进另外一个独立的函数<br />中。这样做的好处：避免出现超大函数，独立出来的函数有助于代码复用/覆写/逻辑清晰<br />//bad case<br />var getUserInfo = function(){<br />ajax( ‘http:// xxx.com/userInfo’, function( data ){<br />console.log( ‘userId: ’ + data.userId );<br />console.log( ‘userName: ’ + data.userName );<br />console.log( ‘nickName: ’ + data.nickName );<br />});<br />};<br />改成：<br />//good case<br />var getUserInfo = function(){<br />ajax( ‘http:// xxx.com/userInfo’, function( data ){<br />printDetails( data );<br />});<br />};<br />var printDetails = function( data ){<br />console.log( ‘userId: ’ + data.userId );<br />console.log( ‘userName: ’ + data.userName );<br />console.log( ‘nickName: ’ + data.nickName );<br />};<br />合并重复条件片段<br />如果一个函数体内有一些条件分支语句，而这些条件分支语句内部散布了一些重复的代码，<br />那么就有必要进行合并去重工作。<br />//bad case<br />var paging = function( currPage ){<br />if ( currPage &#x3C;= 0 ){<br />currPage = 0;<br />jump( currPage ); // 跳转<br />}else if ( currPage >= totalPage ){<br />currPage = totalPage;<br />jump( currPage ); // 跳转<br />}else{<br />jump( currPage ); // 跳转<br />}<br />};<br />改成<br />//good case<br />var paging = function( currPage ){<br />if ( currPage &#x3C;= 0 ){<br />currPage = 0;<br />}else if ( currPage >= totalPage ){<br />currPage = totalPage;<br />}<br />jump( currPage ); // 把jump 函数独立出来<br />};<br />把条件分支语句提炼出函数<br />复杂的条件分支语句是导致程序难以阅读和理解的重要原因，而且容易导致<br />一个庞大的函数,把逻辑判断代码提炼成一个单独的函数，既能更准确地表达代码的意思，<br />函数名本身又能起到注释的作用。<br />//bad case<br />var getPrice = function( price ){<br />var date = new Date();<br />if ( date.getMonth() >= 6 &#x26;&#x26; date.getMonth() &#x3C;= 9 ){ // 夏天<br />return price * 0.8;<br />}<br />return price;<br />};<br />改成:<br />//good case<br />var isSummer = function(){<br />var date = new Date();<br />return date.getMonth() >= 6 &#x26;&#x26; date.getMonth() &#x3C;= 9;<br />};<br />var getPrice = function( price ){<br />if ( isSummer() ){ // 夏天<br />return price * 0.8;<br />}<br />return price;<br />};<br />合理使用循环<br />在函数体内，如果有些代码实际上负责的是一些重复性的工作，那么合理利用循环不仅可以<br />完成同样的功能，还可以使代码量更少。<br />//bad case<br />var createXHR = function(){<br />var xhr;<br />try{<br />xhr = new ActiveXObject( ‘MSXML2.XMLHttp.6.0’ );<br />}catch(e){<br />try{<br />xhr = new ActiveXObject( ‘MSXML2.XMLHttp.3.0’ );<br />}catch(e){<br />xhr = new ActiveXObject( ‘MSXML2.XMLHttp’ );<br />}<br />}<br />return xhr;<br />};<br />var xhr = createXHR();<br />改成：<br />//good case<br />var createXHR = function(){<br />var versions= [ ‘MSXML2.XMLHttp.6.0ddd’, ‘MSXML2.XMLHttp.3.0’, ‘MSXML2.XMLHttp’ ];<br />for ( var i = 0, version; version = versions[ i++ ]; ){<br />try{<br />return new ActiveXObject( version );<br />}catch(e){<br />}<br />}<br />};<br />提前让函数退出代替嵌套条件分支，条件退出前置<br />挑选一些条件分支，在进入这些条件分支之后，就立即让这个函数退出。避免过于复杂的嵌套条件分支语句。<br />//bad case<br />var del = function( obj ){<br />var ret;<br />if ( !obj.isReadOnly ){ // 不为只读的才能被删除<br />if ( obj.isFolder ){ // 如果是文件夹<br />ret = deleteFolder( obj );<br />}else if ( obj.isFile ){ // 如果是文件<br />ret = deleteFile( obj );<br />}<br />}<br />return ret;<br />};<br />改成：<br />//good case<br />var del = function( obj ){<br />if ( obj.isReadOnly ){ // 反转if 表达式<br />return;<br />}<br />if ( obj.isFolder ){<br />return deleteFolder( obj );<br />}<br />if ( obj.isFile ){<br />return deleteFile( obj );<br />}<br />};<br />传递对象参数代替过长的参数列表<br />有时候一个函数有可能接收多个参数，而参数的数量越多，函数就越难理解和使用。我们可以把参数都放入一个对象内,需要的数据可以自行从该对象里获取,不用再关心参数的数量和顺序.<br />//bad case<br />var setUserInfo = function( id, name, address, sex, mobile, qq ){<br />console.log( ‘id= ’ + id );<br />console.log( ‘name= ’ +name );<br />console.log( ‘address= ’ + address );<br />console.log( ‘sex= ’ + sex );<br />console.log( ‘mobile= ’ + mobile );<br />console.log( ‘qq= ’ + qq );<br />};<br />setUserInfo( 1314, ‘sven’, ‘shenzhen’, ‘male’, ‘137’, 377876679 );<br />改成：<br />//good case<br />var setUserInfo = function( obj ){<br />console.log( ‘id= ’ + obj.id );<br />console.log( ‘name= ’ + obj.name );<br />console.log( ‘address= ’ + obj.address );<br />console.log( ‘sex= ’ + obj.sex );<br />console.log( ‘mobile= ’ + obj.mobile );<br />console.log( ‘qq= ’ + obj.qq );<br />};<br />setUserInfo({<br />id: 1314,<br />name: ‘sven’,<br />address: ‘shenzhen’,<br />sex: ‘male’,<br />mobile: ‘137’,<br />qq: 377876679<br />});<br />尽量减少参数数量<br />如果调用一个函数时需要传入多个参数，那这个函数是让人望而生畏的，我们必须搞清楚这<br />些参数代表的含义，必须小心翼翼地把它们按照顺序传入该函数。实际开发中，向函数传递参数不可避免，但我们应该尽量减少函数接收的参数数量。<br />//bad case<br />var draw = function( width, height, square ){};<br />改成：<br />//good case<br />var draw = function( width, height ){<br />var square = width * height;<br />};<br />少用三目运算符<br />有一些程序员喜欢大规模地使用三目运算符，来代替传统的if、else。但是有些时候要保证代码可读性和可维护性，尽量少用三目运算符。<br />//bad case<br />var global = typeof window !== “undefined” ? window : this;<br />改成：<br />//good case<br />var global = null;<br />if (typeof window !== “undefined”) {<br />global = window;<br />else{<br />global = this;<br />}<br />合理使用链式调用<br />链式调用的方式并不会造成太多阅读上的困难，也能省下一些字符和中间变量。链式调用带来的坏处就是在调试的时候非常不方便，如果我们知道一条链中有错误出现，必须得先把这条链拆开才能加上一些调试log 或者增加断点，这样才能定位错误出现的地方。如果该链条的结构相对稳定，后期不易发生修改，那么使用链式调用无可厚非。但如果该链条很容易发生变化，导致调试和维护困难，那么还是建议使用普通调用的形式。<br />//bad case<br />var User = {<br />id: null,<br />name: null,<br />setId: function( id ){<br />this.id = id;<br />return this;<br />},<br />setName: function( name ){<br />this.name = name;<br />return this;<br />}<br />};<br />console.log( User.setId( 1314 ).setName( ‘sven’ ) );<br />改成：<br />//good case<br />var user = new User();<br />user.setId( 1314 );<br />user.setName( ‘sven’ );<br />分解大型类<br />如果一个类的职责太大了，实际上它的职责完全有必要拆成多个的类存在，面向对象设计鼓励将行为分布在合理数量的更小对象。<br />//bad case<br />var Spirit = function( name ){<br />this.name = name;<br />};<br />Spirit.prototype.attack = function( type ){ // 攻击<br />if ( type === ‘waveBoxing’ ){<br />console.log( this.name + ’: 使用波动拳’ );<br />}else if( type === ‘whirlKick’ ){<br />console.log( this.name + ’: 使用旋风腿’ );<br />}<br />};<br />var spirit = new Spirit( ‘RYU’ );<br />spirit.attack( ‘waveBoxing’ ); // 输出：RYU: 使用波动拳<br />spirit.attack( ‘whirlKick’ ); // 输出：RYU: 使用旋风腿<br />改为：<br />//good case<br />var Attack = function( spirit ){<br />this.spirit = spirit;<br />};<br />Attack.prototype.start = function( type ){<br />return this.list[ type ].call( this );<br />};<br />Attack.prototype.list = {<br />waveBoxing: function(){<br />console.log( this.spirit.name + ’: 使用波动拳’ );<br />},<br />whirlKick: function(){<br />console.log( this.spirit.name + ’: 使用旋风腿’ );<br />}<br />};<br />var Spirit = function( name ){<br />this.name = name;<br />this.attackObj = new Attack( this );<br />};<br />Spirit.prototype.attack = function( type ){ // 攻击<br />this.attackObj.start( type );<br />};<br />var spirit = new Spirit( ‘RYU’ );<br />spirit.attack( ‘waveBoxing’ ); // 输出：RYU: 使用波动拳<br />spirit.attack( ‘whirlKick’ ); // 输出：RYU: 使用旋风腿<br />用return 退出多重循环<br />假设在函数体内有一个两重循环语句，我们需要在内层循环中判断，当达到某个临界条件时<br />退出外层的循环。我们大多数时候会引入一个控制标记变量,但这做法无疑都让人头晕目眩，更简单的做法是在需要中止循环的时候直接退出整个方法。<br />//bad case<br />var func = function(){<br />var flag = false;<br />for ( var i = 0; i &#x3C; 10; i++ ){<br />for ( var j = 0; j &#x3C; 10; j++ ){<br />if ( i * j >30 ){<br />flag = true;<br />break;<br />}<br />}<br />if ( flag === true ){<br />break;<br />}<br />}<br />};<br />改成：<br />//good case<br />var func = function(){<br />for ( var i = 0; i &#x3C; 10; i++ ){<br />for ( var j = 0; j &#x3C; 10; j++ ){<br />if ( i * j >30 ){<br />return;<br />}<br />}<br />}<br />};<br />总结<br />很早些年其实看了不少次《设计模式》系列的书籍，但是以前项目经验太少，也因为代码写的少，对代码设计这块其实领悟得不够多。如今做了一段时间后回顾这块内容的时候，对自己在代码设计以及重构方面还是有了很大的帮助。后续还是要怀抱着对代码的敬畏之心，好好写好自己的代码。</p>","frontmatter":{"title":"前端Js的设计模式和重构方法","date":"2020-07-26","description":null}}},"pageContext":{"slug":"/techblog/xyhxxs/","previous":{"fields":{"slug":"/techblog/mssrgb/"},"frontmatter":{"title":"天气真好","date":"2020-07-24"}},"next":{"fields":{"slug":"/techblog/fciirz/"},"frontmatter":{"title":"123123312","date":"2020-07-26"}}}}}