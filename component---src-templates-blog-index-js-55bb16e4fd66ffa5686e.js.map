{"version":3,"sources":["webpack:///./src/templates/blog-index.js"],"names":["BlogIndex","render","this","props","data","pageContext","totalPage","currentPage","pageScore","siteMetadata","site","posts","allMarkdownRemark","edges","location","title","style","width","rhythm","height","map","node","frontmatter","fields","slug","dateStr","key","marginTop","marginBottom","boxShadow","to","date","className","rel","v","color","React","Component"],"mappings":"uLASMA,G,4GACJC,OAAA,WAAW,IAAD,EACoBC,KAAKC,MAA1BC,EADC,EACDA,KAAMC,EADL,EACKA,YACNC,EAAqCD,EAArCC,UAAWC,EAA0BF,EAA1BE,YAAaC,EAAaH,EAAbG,UACzBC,EAAeL,EAAKM,KAAKD,aACzBE,EAAQP,EAAKQ,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQC,SAAUZ,KAAKC,MAAMW,SAAUL,aAAcA,GACnD,kBAAC,IAAD,CAAKM,MAAM,cACX,6BACEC,MAAO,CACLC,MAAOC,YAAQ,IACfC,OAAQ,SAGTR,EAAMS,KAAK,YAAa,IAAXC,EAAU,EAAVA,KACNN,EAAQM,EAAKC,YAAYP,OAASM,EAAKE,OAAOC,KAC9CC,EAAUJ,EAAKC,YAAYG,QACjC,OACE,yBAAKC,IAAKL,EAAKE,OAAOC,MACpB,wBACER,MAAO,CACLW,UAAWT,YAAQ,IACnBU,aAAcV,YAAQ,EAAI,KAG5B,kBAAC,IAAD,CAAMF,MAAO,CAACa,UAAU,QAAUC,GAAE,SAAWL,EAAUJ,EAAKE,OAAOC,MAClET,IAGL,+BAAQM,EAAKC,YAAYS,UAI7B,yBAAKC,UAAU,QACZzB,EAAc,EAAI,GACjB,kBAAC,IAAD,CACEuB,GAAIvB,EAAc,GAAM,EAAI,IAAM,SAAWA,EAAc,EAC3D0B,IAAI,QAFN,QAMAzB,GAAa,IAAIY,KAAK,SAAAc,GACtB,OACE,kBAAC,IAAD,CACElB,MAAO,CAACmB,MAAOD,IAAM3B,EAAc,MAAQ,MAC3CuB,GAAU,IAANI,EAAU,IAAM,SAAWA,GAE9BA,MAIN3B,EAAc,GAAKD,GAClB,kBAAC,IAAD,CAAMwB,GAAI,UAAYvB,EAAc,GAAI0B,IAAI,QAA5C,W,GAtDQG,IAAMC,YAiEfrC,a","file":"component---src-templates-blog-index-js-55bb16e4fd66ffa5686e.js","sourcesContent":["import React from 'react';\nimport {Link, graphql} from 'gatsby';\n\n// import Bio from '../components/bio';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport {rhythm} from '../utils/typography';\nimport './index.scss';\n\nclass BlogIndex extends React.Component {\n  render () {\n    const {data, pageContext} = this.props;\n    const {totalPage, currentPage, pageScore} = pageContext;\n    const siteMetadata = data.site.siteMetadata;\n    const posts = data.allMarkdownRemark.edges;\n\n    return (\n      <Layout location={this.props.location} siteMetadata={siteMetadata}>\n        <SEO title=\"All posts\" />\n        <article\n          style={{\n            width: rhythm (28),\n            height: '100%',\n          }}\n        >\n          {posts.map (({node}) => {\n            const title = node.frontmatter.title || node.fields.slug;\n            const dateStr = node.frontmatter.dateStr;\n            return (\n              <div key={node.fields.slug} >\n                <h3\n                  style={{\n                    marginTop: rhythm (1 / 2),\n                    marginBottom: rhythm (1 / 4),\n                  }}\n                >\n                  <Link style={{boxShadow: `none`}} to={`/post/${dateStr}${node.fields.slug}`}>\n                    {title}\n                  </Link>\n                </h3>\n                <small>{node.frontmatter.date}</small>\n              </div>\n            );\n          })}\n            <div className=\"page\">\n              {currentPage - 1 > 0 &&\n                <Link\n                  to={currentPage - 1 === 1 ? '/' : '/page/' + currentPage - 1}\n                  rel=\"prev\"\n                >\n                  上一页\n                </Link>}\n              {(pageScore || []).map (v => {\n                return (\n                  <Link\n                    style={{color: v === currentPage ? 'red' : null}}\n                    to={v === 1 ? '/' : '/page/' + v}\n                  >\n                    {v}\n                  </Link>\n                );\n              })}\n              {currentPage + 1 <= totalPage &&\n                <Link to={'/page/' + (currentPage + 1)} rel=\"next\">\n                  下一页\n                </Link>}\n            </div>\n        </article>\n\n      </Layout>\n    );\n  }\n}\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        social {\n          github\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"YYYY-MM-DD\")\n            dateStr:date(formatString: \"YYYY-MM-DD\")\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}